from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
import logging

from bot.config import logger
from bot.handlers.keyboards import get_back_to_main_keyboard
from bot.services.coingecko_api import get_crypto_rates, get_crypto_rates_fallback
from bot.utils.formatters import format_percentage_change

logger = logging.getLogger(__name__)

def format_crypto_rates_message(crypto_rates: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    if not crypto_rates:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –æ—Ç CoinGecko API."
    
    message = f"‚Çø <b>–ö–£–†–°–´ –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢</b>\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–ø–µ—Ä–≤—ã–µ 5)
    main_cryptos = ['bitcoin', 'ethereum', 'binancecoin', 'ripple', 'cardano']
    
    for crypto_id in main_cryptos:
        if crypto_id in crypto_rates:
            data = crypto_rates[crypto_id]
            
            name = data.get('name', 'N/A')
            symbol = data.get('symbol', 'N/A')
            price_rub = data.get('price_rub', 0)
            price_usd = data.get('price_usd', 0)
            change_24h = data.get('change_24h', 0)
            
            change_icon = "üìà" if change_24h > 0 else "üìâ" if change_24h < 0 else "‚û°Ô∏è"
            
            message += (
                f"<b>{name} ({symbol})</b>\n"
                f"   üí∞ <b>{price_rub:,.0f} —Ä—É–±.</b>\n"
                f"   üíµ {price_usd:,.2f} $\n"
                f"   {change_icon} <i>{change_24h:+.2f}% (24—á)</i>\n\n"
            )
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    other_cryptos = [crypto_id for crypto_id in crypto_rates.keys() 
                    if crypto_id not in main_cryptos and crypto_id not in ['update_time', 'source']]
    
    if other_cryptos:
        message += "üîπ <b>–î—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n"
        
        for crypto_id in other_cryptos:
            data = crypto_rates[crypto_id]
            symbol = data.get('symbol', 'N/A')
            price_rub = data.get('price_rub', 0)
            change_24h = data.get('change_24h', 0)
            
            change_icon = "üìà" if change_24h > 0 else "üìâ" if change_24h < 0 else "‚û°Ô∏è"
            
            message += (
                f"   <b>{symbol}</b>: {price_rub:,.0f} —Ä—É–±. {change_icon}\n"
            )
    
    message += f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {crypto_rates.get('update_time', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</i>\n\n"
    message += "üí° <i>–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã CoinGecko API</i>"
    
    if crypto_rates.get('source') == 'coingecko':
        message += f"\n\n‚úÖ <i>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ CoinGecko</i>"
    
    return message

async def show_crypto_rates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = "üîÑ <b>–ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...</b>"
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                loading_message, 
                parse_mode='HTML', 
                reply_markup=get_back_to_main_keyboard()
            )
        else:
            message = await update.message.reply_text(
                loading_message, 
                parse_mode='HTML', 
                reply_markup=get_back_to_main_keyboard()
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        crypto_rates = get_crypto_rates()
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if not crypto_rates:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç CoinGecko, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            crypto_rates = get_crypto_rates_fallback()
        
        if not crypto_rates:
            error_msg = (
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ CoinGecko API\n"
                "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(
                    error_msg, 
                    parse_mode='HTML', 
                    reply_markup=get_back_to_main_keyboard()
                )
            else:
                await message.edit_text(
                    error_msg, 
                    parse_mode='HTML', 
                    reply_markup=get_back_to_main_keyboard()
                )
            return
        
        message_text = format_crypto_rates_message(crypto_rates)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        if crypto_rates.get('source') == 'demo_fallback':
            message_text += "\n\n‚ö†Ô∏è <i>–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CoinGecko API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)</i>"
        
        from telegram import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='crypto_rates')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                message_text, 
                parse_mode='HTML', 
                reply_markup=reply_markup
            )
        else:
            await message.edit_text(
                message_text, 
                parse_mode='HTML', 
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                error_msg,
                reply_markup=get_back_to_main_keyboard()
            )
        else:
            await update.message.reply_text(
                error_msg,
                reply_markup=get_back_to_main_keyboard()
            )

async def crypto_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crypto"""
    await show_crypto_rates(update, context)

def setup_crypto_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    application.add_handler(CommandHandler("crypto", crypto_command))
