from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CommandHandler
import logging

from bot.config import logger, SUPPORTED_CURRENCIES
from bot.handlers.keyboards import get_back_to_main_keyboard, get_alerts_keyboard
from bot.services.cbr_api import get_currency_rates_with_tomorrow
from bot.db import add_alert, get_user_alerts, clear_user_alerts, get_all_active_alerts, remove_alert  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

logger = logging.getLogger(__name__)

# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

async def alert_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç—ã"""
    try:
        args = context.args
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /alert —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args}")
        
        if len(args) != 4:
            keyboard = [
                [InlineKeyboardButton("üìã –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='my_alerts')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üìù <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /alert &lt;–∏–∑&gt; &lt;–≤&gt; &lt;–ø–æ—Ä–æ–≥&gt; &lt;above|below&gt;\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ <code>/alert USD RUB 80 above</code> - —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–≥–¥–∞ USD –≤—ã—à–µ 80 —Ä—É–±.\n"
                "‚Ä¢ <code>/alert EUR RUB 90 below</code> - —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–≥–¥–∞ EUR –Ω–∏–∂–µ 90 —Ä—É–±.\n\n"
                "üí± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:</b> {', '.join(SUPPORTED_CURRENCIES)}\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å!",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return
        
        from_curr, to_curr = args[0].upper(), args[1].upper()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
        if from_curr not in SUPPORTED_CURRENCIES:
            await update.message.reply_text(
                f"‚ùå –í–∞–ª—é—Ç–∞ <b>{from_curr}</b> –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n"
                f"üí± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:</b> {', '.join(SUPPORTED_CURRENCIES)}",
                parse_mode='HTML',
                reply_markup=get_back_to_main_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞ - RUB
        if to_curr != 'RUB':
            await update.message.reply_text(
                "‚ùå –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä —Å RUB.\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/alert USD RUB 80 above</code>",
                parse_mode='HTML',
                reply_markup=get_back_to_main_keyboard()
            )
            return
        
        try:
            threshold = float(args[2])
            if threshold <= 0:
                raise ValueError("–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.",
                reply_markup=get_back_to_main_keyboard()
            )
            return
        
        direction = args[3].lower()
        if direction not in ['above', 'below']:
            await update.message.reply_text(
                "‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'above' –∏–ª–∏ 'below'.",
                reply_markup=get_back_to_main_keyboard()
            )
            return
        
        user_id = update.effective_message.from_user.id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: user_id={user_id}, {from_curr}/{to_curr} {threshold} {direction}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await add_alert(user_id, from_curr, to_curr, threshold, direction)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        rates_today, _, _, _ = get_currency_rates_with_tomorrow()
        current_rate = "N/A"
        if rates_today and from_curr in rates_today:
            current_rate = f"{rates_today[from_curr]['value']:.2f}"
        
        keyboard = [
            [InlineKeyboardButton("üìã –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='my_alerts')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        success_message = (
            f"‚úÖ <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û!</b>\n\n"
            f"üí± <b>–ü–∞—Ä–∞:</b> {from_curr}/{to_curr}\n"
            f"üéØ <b>–ü–æ—Ä–æ–≥:</b> {threshold} —Ä—É–±.\n"
            f"üìä <b>–£—Å–ª–æ–≤–∏–µ:</b> –∫—É—Ä—Å <b>{'–≤—ã—à–µ' if direction == 'above' else '–Ω–∏–∂–µ'}</b> {threshold} —Ä—É–±.\n"
            f"üíπ <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> {current_rate} —Ä—É–±.\n\n"
            f"üí° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n"
            f"üîî –ü—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        
        await update.message.reply_text(
            success_message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /alert: {e}")
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n<code>{str(e)}</code>",
            parse_mode='HTML',
            reply_markup=get_back_to_main_keyboard()
        )

async def my_alerts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = update.effective_user.id
        logger.info(f"–ó–∞–ø—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        alerts = await get_user_alerts(user_id)
        
        if not alerts:
            message = "üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.</b>\n\n"
            message += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            message += "<code>/alert USD RUB 80 above</code>\n"
            message += "—á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∫—É—Ä—Å USD –ø—Ä–µ–≤—ã—Å–∏—Ç 80 —Ä—É–±–ª–µ–π"
            
            keyboard = [
                [InlineKeyboardButton("üí± –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data='create_alert')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(
                    message, 
                    parse_mode='HTML', 
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    message, 
                    parse_mode='HTML', 
                    reply_markup=reply_markup
                )
            return
        
        message = "üîî <b>–í–ê–®–ò –ê–ö–¢–ò–í–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø</b>\n\n"
        
        for i, alert in enumerate(alerts, 1):
            from_curr = alert['from_currency']
            to_curr = alert['to_currency']
            threshold = alert['threshold']
            direction = alert['direction']
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            rates_today, _, _, _ = get_currency_rates_with_tomorrow()
            current_rate = "N/A"
            if rates_today and from_curr in rates_today:
                current_rate = f"{rates_today[from_curr]['value']:.2f}"
            
            message += (
                f"{i}. <b>{from_curr} ‚Üí {to_curr}</b>\n"
                f"   üéØ –ü–æ—Ä–æ–≥: <b>{threshold} —Ä—É–±.</b>\n"
                f"   üìä –£—Å–ª–æ–≤–∏–µ: –∫—É—Ä—Å <b>{'–≤—ã—à–µ' if direction == 'above' else '–Ω–∏–∂–µ'}</b> {threshold} —Ä—É–±.\n"
                f"   üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: <b>{current_rate} —Ä—É–±.</b>\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if current_rate != "N/A":
                current_value = float(current_rate)
                threshold_value = float(threshold)
                if direction == 'above' and current_value >= threshold_value:
                    message += "   ‚úÖ <b>–£–°–õ–û–í–ò–ï –í–´–ü–û–õ–ù–ï–ù–û!</b>\n"
                elif direction == 'below' and current_value <= threshold_value:
                    message += "   ‚úÖ <b>–£–°–õ–û–í–ò–ï –í–´–ü–û–õ–ù–ï–ù–û!</b>\n"
                else:
                    progress = abs(current_value - threshold_value)
                    message += f"   üìà –û—Å—Ç–∞–ª–æ—Å—å: <b>{progress:.2f} —Ä—É–±.</b>\n"
            
            message += "\n"
        
        message += "‚è∞ <i>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>\n"
        message += "üí° <i>–ü—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç—Å—è</i>"
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                message, 
                parse_mode='HTML', 
                reply_markup=get_alerts_keyboard()
            )
        else:
            await update.message.reply_text(
                message, 
                parse_mode='HTML', 
                reply_markup=get_alerts_keyboard()
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /myalerts: {e}")
        error_msg = (
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /debug_alerts –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."
        )
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                error_msg, 
                parse_mode='HTML', 
                reply_markup=get_back_to_main_keyboard()
            )
        else:
            await update.message.reply_text(
                error_msg, 
                parse_mode='HTML', 
                reply_markup=get_back_to_main_keyboard()
            )

async def clear_all_alerts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        alerts = await get_user_alerts(user_id)
        
        if not alerts:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await clear_user_alerts(user_id)
        
        await query.edit_message_text(
            "‚úÖ <b>–í—Å–µ –≤–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.</b>",
            parse_mode='HTML',
            reply_markup=get_back_to_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

async def debug_alerts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        user_id = update.effective_user.id
        logger.info(f"–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è user_id: {user_id}")
        
        # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import asyncpg
        import os
        conn = await asyncpg.connect(os.getenv('DATABASE_URL'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        table_exists = await conn.fetchval(
            "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'alerts')"
        )
        logger.info(f"–¢–∞–±–ª–∏—Ü–∞ alerts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {table_exists}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        alerts = await conn.fetch(
            "SELECT * FROM alerts WHERE user_id = $1 ORDER BY id DESC",
            user_id
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        table_structure = await conn.fetch(
            "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'alerts'"
        )
        
        await conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üîß <b>–û–¢–õ–ê–î–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô</b>\n\n"
        message += f"<b>User ID:</b> {user_id}\n"
        message += f"<b>–¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:</b> {table_exists}\n\n"
        
        message += "<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã alerts:</b>\n"
        for col in table_structure:
            message += f"  {col['column_name']} ({col['data_type']})\n"
        
        message += f"\n<b>–ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> {len(alerts)}\n\n"
        
        for i, alert in enumerate(alerts, 1):
            message += f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {i}:</b>\n"
            for key, value in alert.items():
                message += f"  {key}: {value}\n"
            message += "\n"
        
        if not alerts:
            message += "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            message += "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            message += "1. –ö–æ–º–∞–Ω–¥–∞ /alert –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
            message += "2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
            message += "3. –¢–∞–±–ª–∏—Ü–∞ alerts —Å–æ–∑–¥–∞–Ω–∞\n"
        
        await update.message.reply_text(message, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {str(e)}")

async def myalerts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /myalerts"""
    await my_alerts_command(update, context)

def setup_alerts_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    application.add_handler(CommandHandler("alert", alert_command))
    application.add_handler(CommandHandler("myalerts", myalerts_command))
    application.add_handler(CommandHandler("debug_alerts", debug_alerts_command))
