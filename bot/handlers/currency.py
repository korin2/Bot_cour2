from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
import logging

from bot.config import logger
from bot.handlers.keyboards import get_back_to_main_keyboard
from bot.services.cbr_api import get_currency_rates_with_tomorrow
from bot.utils.formatters import format_currency_display

logger = logging.getLogger(__name__)

def format_currency_rates_message(rates_today: dict, date_today: str, 
                                rates_tomorrow: dict = None, changes: dict = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞"""
    if not rates_today:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§."
    
    message = f"üí± <b>–ö–£–†–°–´ –í–ê–õ–Æ–¢ –¶–ë –†–§</b>\n"
    message += f"üìÖ <i>–Ω–∞ {date_today}</i>\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã (–¥–æ–ª–ª–∞—Ä, –µ–≤—Ä–æ)
    main_currencies = ['USD', 'EUR']
    for currency in main_currencies:
        if currency in rates_today:
            data = rates_today[currency]
            
            message += f"üíµ <b>{data['name']}</b> ({currency}):\n"
            message += f"   <b>{data['value']:.2f} —Ä—É–±.</b>\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            if rates_tomorrow and currency in rates_tomorrow and currency in changes:
                tomorrow_data = rates_tomorrow[currency]
                change_info = changes[currency]
                change_icon = "üìà" if change_info['change'] > 0 else "üìâ" if change_info['change'] < 0 else "‚û°Ô∏è"
                
                message += f"   <i>–ó–∞–≤—Ç—Ä–∞: {tomorrow_data['value']:.2f} —Ä—É–±. {change_icon}</i>\n"
                message += f"   <i>–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_info['change']:+.2f} —Ä—É–±. ({change_info['change_percent']:+.2f}%)</i>\n"
            
            message += "\n"
    
    # –î—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã
    other_currencies = [curr for curr in rates_today.keys() if curr not in main_currencies]
    if other_currencies:
        message += "üåç <b>–î—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã:</b>\n"
        
        for currency in other_currencies:
            data = rates_today[currency]
            
            # –î–ª—è JPY –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞ 100 –µ–¥–∏–Ω–∏—Ü
            if currency == 'JPY':
                display_value = data['value'] * 100
                currency_text = f"   {data['name']} ({currency}): <b>{display_value:.2f} —Ä—É–±.</b>"
            else:
                currency_text = f"   {data['name']} ({currency}): <b>{data['value']:.2f} —Ä—É–±.</b>"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–≤—Ç—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if rates_tomorrow and currency in rates_tomorrow and currency in changes:
                change_info = changes[currency]
                change_icon = "üìà" if change_info['change'] > 0 else "üìâ" if change_info['change'] < 0 else "‚û°Ô∏è"
                currency_text += f" {change_icon}"
            
            message += currency_text + "\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –∫—É—Ä—Å–æ–≤
    if rates_tomorrow:
        from datetime import datetime, timedelta
        tomorrow_date = (datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y')
        message += f"\nüìä <i>–ö—É—Ä—Å—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow_date}) –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –¶–ë –†–§</i>"
    else:
        message += f"\nüí° <i>–ö—É—Ä—Å—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –¶–ë –†–§ –ø–æ–∑–∂–µ</i>"
    
    message += f"\n\nüí° <i>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –¶–ë –†–§ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞</i>"
    return message

async def show_currency_rates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞"""
    try:
        rates_today, date_today, rates_tomorrow, changes = get_currency_rates_with_tomorrow()
        
        if not rates_today:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await update.effective_message.reply_text(
                error_msg,
                reply_markup=get_back_to_main_keyboard()
            )
            return
        
        message = format_currency_rates_message(rates_today, date_today, rates_tomorrow, changes)
        
        await update.effective_message.edit_text(
            message, 
            parse_mode='HTML', 
            reply_markup=get_back_to_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§."
        await update.effective_message.reply_text(
            error_msg,
            reply_markup=get_back_to_main_keyboard()
        )

async def rates_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rates"""
    await show_currency_rates(update, context)

async def currency_rates_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /currency"""
    await show_currency_rates(update, context)

def setup_currency_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–∞–ª—é—Ç"""
    application.add_handler(CommandHandler("rates", rates_command))
    application.add_handler(CommandHandler("currency", currency_rates_command))
