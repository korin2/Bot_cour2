from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
import logging

from bot.config import logger
from bot.handlers.keyboards import get_back_to_main_keyboard
from bot.services.cbr_api import get_key_rate

logger = logging.getLogger(__name__)

def format_key_rate_message(key_rate_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–æ–π"""
    if not key_rate_data:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–µ –æ—Ç –¶–ë –†–§."
    
    rate = key_rate_data['rate']
    source = key_rate_data.get('source', 'unknown')
    
    message = f"üíé <b>–ö–õ–Æ–ß–ï–í–ê–Ø –°–¢–ê–í–ö–ê –¶–ë –†–§</b>\n\n"
    message += f"<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {rate:.2f}%\n"
    message += f"\n<b>–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</b> {key_rate_data.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
    message += "üí° <i>–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§,\n"
    message += "–∫–æ—Ç–æ—Ä–∞—è –≤–ª–∏—è–µ—Ç –Ω–∞ –∫—Ä–µ–¥–∏—Ç—ã, –¥–µ–ø–æ–∑–∏—Ç—ã –∏ —ç–∫–æ–Ω–æ–º–∏–∫—É –≤ —Ü–µ–ª–æ–º</i>"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö
    if source == 'cbr_parsed':
        message += f"\n\n‚úÖ <i>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –¶–ë –†–§</i>"
    elif source == 'cbr_api':
        message += f"\n\n‚úÖ <i>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ API –¶–ë –†–§</i>"
    elif source == 'demo':
        message += f"\n\n‚ö†Ô∏è <i>–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö)</i>"
    
    return message

async def show_key_rate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¶–ë –†–§"""
    try:
        key_rate_data = get_key_rate()
        
        if not key_rate_data:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¶–ë –†–§."
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.message.reply_text(
                    error_msg,
                    reply_markup=get_back_to_main_keyboard()
                )
            else:
                await update.message.reply_text(
                    error_msg,
                    reply_markup=get_back_to_main_keyboard()
                )
            return
        
        message = format_key_rate_message(key_rate_data)
        
        from telegram import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = [
            [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='currency_rates')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                message, 
                parse_mode='HTML', 
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                message, 
                parse_mode='HTML', 
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –æ—Ç –¶–ë –†–§."
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.message.reply_text(
                error_msg,
                reply_markup=get_back_to_main_keyboard()
            )
        else:
            await update.message.reply_text(
                error_msg,
                reply_markup=get_back_to_main_keyboard()
            )

async def keyrate_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /keyrate"""
    await show_key_rate(update, context)

def setup_key_rate_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏"""
    application.add_handler(CommandHandler("keyrate", keyrate_command))
