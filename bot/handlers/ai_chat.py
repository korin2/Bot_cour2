from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
import logging

from bot.config import logger, DEEPSEEK_API_KEY
from bot.handlers.keyboards import get_ai_keyboard, get_back_to_main_keyboard
from bot.services.deepseek_api import ask_deepseek
from bot.utils.helpers import split_long_message

logger = logging.getLogger(__name__)

async def handle_ai_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ò–ò"""
    try:
        user_id = update.effective_user.id
        user_message = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
        if user_message.startswith('/'):
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ä–µ–∂–∏–º –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if context.user_data.get('ai_mode') != True:
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update.message.chat.send_action(action="typing")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ DeepSeek
        ai_response = await ask_deepseek(user_message)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
        message_parts = await split_long_message(ai_response)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        first_part = message_parts[0]
        if len(message_parts) > 1:
            first_part += f"\n\nüìÑ <i>–ß–∞—Å—Ç—å 1 –∏–∑ {len(message_parts)}</i>"
        
        await update.message.reply_text(
            f"ü§ñ <b>–ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:</b>\n\n{first_part}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data='ai_chat')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
            ])
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
        for i, part in enumerate(message_parts[1:], 2):
            part_text = part
            if i < len(message_parts):
                part_text += f"\n\nüìÑ <i>–ß–∞—Å—Ç—å {i} –∏–∑ {len(message_parts)}</i>"
            
            await update.message.reply_text(
                part_text,
                parse_mode='HTML'
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ò–ò —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=get_back_to_main_keyboard()
        )

async def show_ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ —Å –ò–ò"""
    try:
        if not DEEPSEEK_API_KEY:
            error_msg = (
                "‚ùå <b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á DeepSeek. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(
                    error_msg, 
                    parse_mode='HTML', 
                    reply_markup=get_back_to_main_keyboard()
                )
            else:
                await update.message.reply_text(
                    error_msg, 
                    parse_mode='HTML', 
                    reply_markup=get_back_to_main_keyboard()
                )
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        test_response = await ask_deepseek("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        if test_response.startswith("‚ùå") or test_response.startswith("‚è∞"):
            # –ï—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_msg = (
                "‚ùå <b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                f"{test_response}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞."
            )
            keyboard = [
                [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='currency_rates')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(
                    error_msg, 
                    parse_mode='HTML', 
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    error_msg, 
                    parse_mode='HTML', 
                    reply_markup=reply_markup
                )
            return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['ai_mode'] = True
        
        welcome_message = (
            "ü§ñ <b>–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ò–ò –ü–û–ú–û–©–ù–ò–ö</b>\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –ª—é–±–æ–π —Ç–µ–º–µ!\n\n"
            "üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ üí∞ –§–∏–Ω–∞–Ω—Å—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n"
            "‚Ä¢ üìä –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—É–∫–∞\n"
            "‚Ä¢ üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ\n"
            "‚Ä¢ üè• –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç\n"
            "‚Ä¢ üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞\n"
            "‚Ä¢ üîß –°–æ–≤–µ—Ç—ã –∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º\n"
            "‚Ä¢ üí¨ –û–±—â–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!\n\n"
            "<i>–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –ò–ò –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'</i>"
        )
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                welcome_message, 
                parse_mode='HTML', 
                reply_markup=get_ai_keyboard()
            )
        else:
            await update.message.reply_text(
                welcome_message, 
                parse_mode='HTML', 
                reply_markup=get_ai_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —á–∞—Ç–∞ —Å –ò–ò: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞."
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.message.reply_text(
                error_msg,
                reply_markup=get_back_to_main_keyboard()
            )
        else:
            await update.message.reply_text(
                error_msg,
                reply_markup=get_back_to_main_keyboard()
            )

async def show_ai_examples(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ò–ò"""
    try:
        examples_text = (
            "üí° <b>–ü–†–ò–ú–ï–†–´ –í–û–ü–†–û–°–û–í –î–õ–Ø –ò–ò</b>\n\n"
            
            "<b>üí∞ –§–∏–Ω–∞–Ω—Å—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ö–∞–∫–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é?\n"
            "‚Ä¢ –í–æ —á—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è?\n"
            "‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞?\n\n"
            
            "<b>üìä –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>\n"
            "‚Ä¢ –ö–∞–∫ –≤—ã—É—á–∏—Ç—å Python —Å –Ω—É–ª—è?\n"
            "‚Ä¢ –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É AI –∏ ML?\n"
            "‚Ä¢ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–∞–π—Ç?\n\n"
            
            "<b>üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "‚Ä¢ –ö–∞–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É—á–∏—Ç—å—Å—è?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å?\n"
            "‚Ä¢ –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º?\n\n"
            
            "<b>üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ:</b>\n"
            "‚Ä¢ –ö–∞–∫ –Ω–∞—É—á–∏—Ç—å—Å—è —Ä–∏—Å–æ–≤–∞—Ç—å?\n"
            "‚Ä¢ –ü–æ—Å–æ–≤–µ—Ç—É–π —Ö–æ—Ä–æ—à–∏–µ —Ñ–∏–ª—å–º—ã\n"
            "‚Ä¢ –ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑?\n\n"
            
            "<b>üè• –ó–¥–æ—Ä–æ–≤—å–µ:</b>\n"
            "‚Ä¢ –ö–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è?\n"
            "‚Ä¢ –ö–∞–∫ –±–æ—Ä–æ—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º?\n\n"
            
            "<b>üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:</b>\n"
            "‚Ä¢ –ö—É–¥–∞ –ø–æ–µ—Ö–∞—Ç—å –æ—Ç–¥—ã—Ö–∞—Ç—å –≤ –¥–µ–∫–∞–±—Ä–µ?\n"
            "‚Ä¢ –ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ü–∞—Ä–∏–∂–µ?\n"
            "‚Ä¢ –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é?\n\n"
            
            "<b>üîß –°–æ–≤–µ—Ç—ã:</b>\n"
            "‚Ä¢ –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?\n"
            "‚Ä¢ –ö–∞–∫ –Ω–∞–ª–∞–¥–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏?\n"
            "‚Ä¢ –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫?\n\n"
            
            "<b>üí¨ –†–∞–∑–Ω–æ–µ:</b>\n"
            "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
            "‚Ä¢ –ü—Ä–∏–¥—É–º–∞–π —à—É—Ç–∫—É\n"
            "‚Ä¢ –û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n"
            
            "<i>–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π!</i>"
        )
        
        keyboard = [
            [InlineKeyboardButton("ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ai_chat')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                examples_text, 
                parse_mode='HTML', 
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                examples_text, 
                parse_mode='HTML', 
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –ò–ò: {e}")

async def show_ai_unavailable(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ò–ò"""
    try:
        message = (
            "‚ùå <b>–ò–ò –ü–û–ú–û–©–ù–ò–ö –í–†–ï–ú–ï–ù–ù–û –ù–ï–î–û–°–¢–£–ü–ï–ù</b>\n\n"
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ API –∞–∫–∫–∞—É–Ω—Ç–µ\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º DeepSeek\n"
            "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞."
        )
        
        keyboard = [
            [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='currency_rates')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                message, 
                parse_mode='HTML', 
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                message, 
                parse_mode='HTML', 
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ò–ò: {e}")

async def ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai"""
    await show_ai_chat(update, context)

def setup_ai_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ò–ò"""
    application.add_handler(CommandHandler("ai", ai_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ai_message))
