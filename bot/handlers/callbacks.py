from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler
import logging

from bot.config import logger
from bot.handlers.keyboards import get_main_menu_keyboard
from bot.handlers.currency import show_currency_rates
from bot.handlers.crypto import show_crypto_rates
from bot.handlers.key_rate import show_key_rate
from bot.handlers.ai_chat import show_ai_chat, show_ai_examples, show_ai_unavailable
from bot.handlers.alerts import my_alerts_command, clear_all_alerts_handler
from bot.handlers.commands import help_command

logger = logging.getLogger(__name__)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫"""
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == 'help':
            await help_command(update, context)
        elif data == 'back_to_main':
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –ò–ò –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            context.user_data['ai_mode'] = False
            await show_main_menu(update, context)
        elif data == 'currency_rates':
            await show_currency_rates(update, context)
        elif data == 'crypto_rates':
            await show_crypto_rates(update, context)
        elif data == 'key_rate':
            await show_key_rate(update, context)
        elif data == 'ai_chat':
            await show_ai_chat(update, context)
        elif data == 'ai_unavailable':
            await show_ai_unavailable(update, context)
        elif data == 'ai_examples':
            await show_ai_examples(update, context)
        elif data == 'my_alerts':
            await my_alerts_command(update, context)
        elif data == 'clear_all_alerts':
            await clear_all_alerts_handler(update, context)
        elif data == 'create_alert':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            from telegram import InlineKeyboardMarkup, InlineKeyboardButton
            help_text = (
                "üìù <b>–°–û–ó–î–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "<code>/alert –í–ê–õ–Æ–¢–ê RUB –ü–û–†–û–ì above/below</code>\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ <code>/alert USD RUB 80 above</code> - —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–≥–¥–∞ USD –≤—ã—à–µ 80 —Ä—É–±.\n"
                "‚Ä¢ <code>/alert EUR RUB 90 below</code> - —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–≥–¥–∞ EUR –Ω–∏–∂–µ 90 —Ä—É–±.\n\n"
                "üí± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n"
                "USD, EUR, GBP, JPY, CNY, CHF, CAD, AUD, TRY, KZT\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä –≤—ã—à–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É!"
            )
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º", callback_data='my_alerts')],
                [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(help_text, parse_mode='HTML', reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user = update.effective_user
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!" if user.first_name else "–ü—Ä–∏–≤–µ—Ç!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ò–ò
        from bot.services.deepseek_api import ask_deepseek
        test_ai = await ask_deepseek("test")
        ai_available = not (test_ai.startswith("‚ùå") or test_ai.startswith("‚è∞"))
        
        await update.effective_message.edit_text(
            f'{greeting} –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–æ–º!\n\n'
            'üèõ <b>–û–§–ò–¶–ò–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –¶–ë –†–§ + –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ + –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ò–ò</b>\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:',
            parse_mode='HTML',
            reply_markup=get_main_menu_keyboard(ai_available)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

def setup_callbacks(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback'–æ–≤"""
    application.add_handler(CallbackQueryHandler(button_handler))
