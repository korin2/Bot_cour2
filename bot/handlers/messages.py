from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters
import logging

from bot.config import logger
from bot.handlers.keyboards import get_back_to_main_keyboard
from bot.services.cbr_api import get_currency_rates_with_tomorrow, get_key_rate
from bot.services.coingecko_api import get_crypto_rates, get_crypto_rates_fallback

logger = logging.getLogger(__name__)

async def handle_financial_questions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –ò–ò API"""
    try:
        user_message = update.message.text.lower()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        responses = {
            '–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞': await get_simple_currency_response('USD'),
            '–∫—É—Ä—Å –µ–≤—Ä–æ': await get_simple_currency_response('EUR'),
            '–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞': await get_simple_key_rate_response(),
            '–±–∏—Ç–∫–æ–∏–Ω': await get_simple_crypto_response('BTC'),
            '—ç—Ñ–∏—Ä–∏—É–º': await get_simple_crypto_response('ETH'),
            '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã': "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /crypto –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã' –≤ –º–µ–Ω—é",
            '–ø–æ–º–æ—â—å': "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
        }
        
        response = None
        for key, value in responses.items():
            if key in user_message:
                response = value
                break
        
        if response:
            await update.message.reply_text(response, parse_mode='HTML')
        else:
            await update.message.reply_text(
                "ü§ñ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫</b>\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—É–Ω–∫—Ü–∏—è –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ üí± –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
                "‚Ä¢ ‚Çø –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
                "‚Ä¢ üíé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É\n"
                "‚Ä¢ üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!",
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")

async def get_simple_currency_response(currency: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç—ã"""
    try:
        rates_today, date_today, _, _ = get_currency_rates_with_tomorrow()
        if rates_today and currency in rates_today:
            rate = rates_today[currency]['value']
            name = rates_today[currency]['name']
            return f"üí± <b>{name}</b>\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: <b>{rate:.2f} —Ä—É–±.</b>\n\n–î–∞—Ç–∞: {date_today}"
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ {currency}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"

async def get_simple_key_rate_response() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–µ"""
    try:
        key_rate_data = get_key_rate()
        if key_rate_data:
            rate = key_rate_data['rate']
            date = key_rate_data.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            return f"üíé <b>–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§</b>\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{rate:.2f}%</b>\n\n–î–∞—Ç–∞: {date}"
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"

async def get_simple_crypto_response(crypto: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ"""
    try:
        crypto_rates = get_crypto_rates() or get_crypto_rates_fallback()
        if crypto_rates:
            if crypto == 'BTC' and 'bitcoin' in crypto_rates:
                btc = crypto_rates['bitcoin']
                return f"‚Çø <b>Bitcoin (BTC)</b>\n–ö—É—Ä—Å: <b>{btc['price_rub']:,.0f} —Ä—É–±.</b>\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {btc['change_24h']:+.2f}%"
            elif crypto == 'ETH' and 'ethereum' in crypto_rates:
                eth = crypto_rates['ethereum']
                return f"üî∑ <b>Ethereum (ETH)</b>\n–ö—É—Ä—Å: <b>{eth['price_rub']:,.0f} —Ä—É–±.</b>\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {eth['change_24h']:+.2f}%"
        return f"–î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {crypto} –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /crypto"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö {crypto}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    try:
        await update.message.reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            reply_markup=get_back_to_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {e}")

def setup_messages(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (fallback)
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        handle_financial_questions
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))
