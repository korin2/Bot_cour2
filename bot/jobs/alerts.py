import logging
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from datetime import datetime
from telegram.ext import ContextTypes

from bot.config import logger, ALERT_CHECK_INTERVAL, DAILY_RATES_TIME
from bot.services.cbr_api import get_currency_rates_with_tomorrow
from db import get_all_active_alerts, remove_alert, get_all_users

logger = logging.getLogger(__name__)

async def check_alerts(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        rates_today, date_today, _, _ = get_currency_rates_with_tomorrow()
        
        if not rates_today:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        alerts = await get_all_active_alerts()
        
        if not alerts:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
        
        triggered_alerts = []
        
        for alert in alerts:
            try:
                from_curr = alert['from_currency'].upper()
                to_curr = alert['to_currency'].upper()
                threshold = float(alert['threshold'])
                direction = alert['direction']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞–ª—é—Ç—ã
                if from_curr not in rates_today:
                    logger.warning(f"–í–∞–ª—é—Ç–∞ {from_curr} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—É—Ä—Å–∞—Ö –¥–ª—è –∞–ª–µ—Ä—Ç–∞ {alert['id']}")
                    continue
                
                current_rate = rates_today[from_curr]['value']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                condition_met = False
                if direction == 'above':
                    condition_met = current_rate >= threshold
                elif direction == 'below':
                    condition_met = current_rate <= threshold
                
                if condition_met:
                    triggered_alerts.append((alert, current_rate))
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–µ—Ä—Ç–∞ {alert.get('id', 'unknown')}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª—è–µ–º —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –∞–ª–µ—Ä—Ç—ã
        for alert, current_rate in triggered_alerts:
            try:
                user_id = alert['user_id']
                from_curr = alert['from_currency']
                to_curr = alert['to_currency']
                threshold = alert['threshold']
                direction = alert['direction']
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = (
                    f"üîî <b>–°–†–ê–ë–û–¢–ê–õ–û –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!</b>\n\n"
                    f"üí± <b>{from_curr} ‚Üí {to_curr}</b>\n"
                    f"üìà <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> {current_rate:.2f} —Ä—É–±.\n"
                    f"üéØ <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥:</b> {threshold} —Ä—É–±.\n"
                    f"üìä <b>–£—Å–ª–æ–≤–∏–µ:</b> –∫—É—Ä—Å {'–≤—ã—à–µ' if direction == 'above' else '–Ω–∏–∂–µ'} {threshold} —Ä—É–±.\n\n"
                    f"<i>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã</i>"
                )
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='HTML'
                )
                
                # –£–¥–∞–ª—è–µ–º —Å—Ä–∞–±–æ—Ç–∞–≤—à–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await remove_alert(alert['id'])
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è {from_curr}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–ª–µ—Ä—Ç–∞ {alert['id']}: {e}")
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ä–∞–±–æ—Ç–∞–ª–æ: {len(triggered_alerts)}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

async def send_daily_rates(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¶–ë –†–§ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        logger.info("–ù–∞—á–∞–ª–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¶–ë –†–§")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        rates_today, date_today, rates_tomorrow, changes = get_currency_rates_with_tomorrow()
        from bot.services.cbr_api import get_key_rate
        key_rate_data = get_key_rate()
        
        if not rates_today:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üåÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¶–ë –†–§</b>\n\n"
        
        if key_rate_data and key_rate_data.get('is_current'):
            rate = key_rate_data['rate']
            message += f"üíé <b>–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞:</b> {rate:.2f}%\n\n"
        
        from bot.handlers.currency import format_currency_rates_message
        message += format_currency_rates_message(rates_today, date_today, rates_tomorrow, changes)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        users = await get_all_users()
        
        if not users:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success_count = 0
        for user in users:
            try:
                await context.bot.send_message(
                    chat_id=user['user_id'],
                    text=message,
                    parse_mode='HTML'
                )
                success_count += 1
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                import asyncio
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
        
        logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{len(users)}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")

def setup_jobs(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    job_queue = application.job_queue
    
    if job_queue:
        # 10:00 –ú–°–ö = 07:00 UTC
        from datetime import datetime
        job_queue.run_daily(
            send_daily_rates,
            time=datetime.strptime(DAILY_RATES_TIME, "%H:%M").time(),
            days=(0, 1, 2, 3, 4, 5, 6)
        )
        logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ 10:00 –ú–°–ö (07:00 UTC)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        job_queue.run_repeating(
            check_alerts, 
            interval=ALERT_CHECK_INTERVAL,
            first=10
        )
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
    else:
        logger.warning("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
