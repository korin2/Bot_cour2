import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import logger, DEEPSEEK_API_KEY
from services import (
    get_currency_rates_with_tomorrow, format_currency_rates_message, 
    get_key_rate, format_key_rate_message, get_crypto_rates, 
    get_crypto_rates_fallback, format_crypto_rates_message, ask_deepseek
)
from utils import split_long_message, create_back_button
from db import get_user_alerts, clear_user_alerts, remove_alert, add_alert, update_user_info

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        await update_user_info(user.id, user.first_name, user.username)
        
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!" if user.first_name else "–ü—Ä–∏–≤–µ—Ç!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ò–ò
        test_ai = await ask_deepseek("test", context)
        ai_available = not (test_ai.startswith("‚ùå") or test_ai.startswith("‚è∞"))
        
        keyboard = [
            [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='currency_rates')],
            [InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data='crypto_rates')],
            [InlineKeyboardButton("üíé –ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", callback_data='key_rate')],
        ]
        
        if ai_available:
            keyboard.append([InlineKeyboardButton("ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò", callback_data='ai_chat')])
        else:
            keyboard.append([InlineKeyboardButton("‚ùå –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", callback_data='ai_unavailable')])
            
        keyboard.extend([
            [InlineKeyboardButton("üîî –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='my_alerts')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')],
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        start_message = f'{greeting} –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:'
        await update.message.reply_text(start_message, parse_mode='HTML', reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/rates - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§
/crypto - –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç  
/keyrate - –ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§
/ai - –ß–∞—Ç —Å –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–æ–º
/myalerts - –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/alert - –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° **–ü—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
/alert USD RUB 80 above - —É–≤–µ–¥–æ–º–∏—Ç –∫–æ–≥–¥–∞ USD –ø—Ä–µ–≤—ã—Å–∏—Ç 80 —Ä—É–±.
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def show_currency_rates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
    try:
        rates_today, date_today, rates_tomorrow, changes = get_currency_rates_with_tomorrow()
        
        if not rates_today:
            await update.effective_message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.", 
                reply_markup=create_back_button()
            )
            return
        
        message = format_currency_rates_message(rates_today, date_today, rates_tomorrow, changes)
        await update.effective_message.reply_text(message, parse_mode='HTML', reply_markup=create_back_button())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def show_key_rate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É"""
    try:
        key_rate_data = get_key_rate()
        
        if not key_rate_data:
            await update.effective_message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É.",
                reply_markup=create_back_button()
            )
            return
        
        message = format_key_rate_message(key_rate_data)
        
        keyboard = [
            [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='currency_rates')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.effective_message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏: {e}")
        await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def show_crypto_rates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = "üîÑ <b>–ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...</b>"
        await update.effective_message.reply_text(loading_message, parse_mode='HTML', reply_markup=create_back_button())
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        crypto_rates = get_crypto_rates()
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if not crypto_rates:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç CoinGecko, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            crypto_rates = get_crypto_rates_fallback()
        
        if not crypto_rates:
            error_msg = "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.</b>"
            await update.effective_message.reply_text(error_msg, parse_mode='HTML', reply_markup=create_back_button())
            return
        
        message_text = format_crypto_rates_message(crypto_rates)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        if crypto_rates.get('source') == 'demo_fallback':
            message_text += "\n\n‚ö†Ô∏è <i>–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CoinGecko API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)</i>"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='crypto_rates')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.effective_message.reply_text(message_text, parse_mode='HTML', reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=create_back_button())

async def show_ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ —Å –ò–ò"""
    try:
        if not DEEPSEEK_API_KEY:
            error_msg = "‚ùå <b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>"
            await update.effective_message.reply_text(error_msg, parse_mode='HTML', reply_markup=create_back_button())
            return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['ai_mode'] = True
        
        welcome_message = (
            "ü§ñ <b>–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ò–ò –ü–û–ú–û–©–ù–ò–ö</b>\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –ª—é–±–æ–π —Ç–µ–º–µ!\n\n"
            "üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ üí∞ –§–∏–Ω–∞–Ω—Å—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n"
            "‚Ä¢ üìä –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—É–∫–∞\n"
            "‚Ä¢ üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ\n"
            "‚Ä¢ üè• –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç\n"
            "‚Ä¢ üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞\n"
            "‚Ä¢ üîß –°–æ–≤–µ—Ç—ã –∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º\n"
            "‚Ä¢ üí¨ –û–±—â–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!\n\n"
            "<i>–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –ò–ò –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'</i>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data='ai_examples')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.effective_message.reply_text(welcome_message, parse_mode='HTML', reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —á–∞—Ç–∞ —Å –ò–ò: {e}")
        await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞.", reply_markup=create_back_button())

async def handle_ai_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ò–ò"""
    try:
        user_id = update.effective_user.id
        user_message = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
        if user_message.startswith('/'):
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ä–µ–∂–∏–º –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if context.user_data.get('ai_mode') != True:
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update.message.chat.send_action(action="typing")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ DeepSeek
        ai_response = await ask_deepseek(user_message, context)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
        message_parts = await split_long_message(ai_response)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        first_part = message_parts[0]
        if len(message_parts) > 1:
            first_part += f"\n\nüìÑ <i>–ß–∞—Å—Ç—å 1 –∏–∑ {len(message_parts)}</i>"
        
        await update.message.reply_text(
            f"ü§ñ <b>–ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:</b>\n\n{first_part}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data='ai_chat')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
            ])
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
        for i, part in enumerate(message_parts[1:], 2):
            part_text = part
            if i < len(message_parts):
                part_text += f"\n\nüìÑ <i>–ß–∞—Å—Ç—å {i} –∏–∑ {len(message_parts)}</i>"
            
            await update.message.reply_text(
                part_text,
                parse_mode='HTML'
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ò–ò —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
            ])
        )

async def alert_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç—ã"""
    try:
        args = context.args
        
        if len(args) != 4:
            await update.message.reply_text(
                "üìù <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /alert &lt;–∏–∑&gt; &lt;–≤&gt; &lt;–ø–æ—Ä–æ–≥&gt; &lt;above|below&gt;\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ <code>/alert USD RUB 80 above</code> - —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–≥–¥–∞ USD –≤—ã—à–µ 80 —Ä—É–±.\n"
                "‚Ä¢ <code>/alert EUR RUB 90 below</code> - —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–≥–¥–∞ EUR –Ω–∏–∂–µ 90 —Ä—É–±.",
                parse_mode='HTML',
                reply_markup=create_back_button()
            )
            return
        
        from_curr, to_curr = args[0].upper(), args[1].upper()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
        supported_currencies = ['USD', 'EUR', 'GBP', 'JPY', 'CNY', 'CHF', 'CAD', 'AUD', 'TRY', 'KZT']
        if from_curr not in supported_currencies:
            await update.message.reply_text(
                f"‚ùå –í–∞–ª—é—Ç–∞ <b>{from_curr}</b> –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n"
                f"üí± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:</b> {', '.join(supported_currencies)}",
                parse_mode='HTML',
                reply_markup=create_back_button()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞ - RUB
        if to_curr != 'RUB':
            await update.message.reply_text(
                "‚ùå –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä —Å RUB.\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/alert USD RUB 80 above</code>",
                parse_mode='HTML',
                reply_markup=create_back_button()
            )
            return
        
        try:
            threshold = float(args[2])
            if threshold <= 0:
                raise ValueError("–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.",
                reply_markup=create_back_button()
            )
            return
        
        direction = args[3].lower()
        if direction not in ['above', 'below']:
            await update.message.reply_text(
                "‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'above' –∏–ª–∏ 'below'.",
                reply_markup=create_back_button()
            )
            return
        
        user_id = update.effective_message.from_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await add_alert(user_id, from_curr, to_curr, threshold, direction)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        rates_today, _, _, _ = get_currency_rates_with_tomorrow()
        current_rate = "N/A"
        if rates_today and from_curr in rates_today:
            current_rate = f"{rates_today[from_curr]['value']:.2f}"
        
        success_message = (
            f"‚úÖ <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û!</b>\n\n"
            f"üí± <b>–ü–∞—Ä–∞:</b> {from_curr}/{to_curr}\n"
            f"üéØ <b>–ü–æ—Ä–æ–≥:</b> {threshold} —Ä—É–±.\n"
            f"üìä <b>–£—Å–ª–æ–≤–∏–µ:</b> –∫—É—Ä—Å <b>{'–≤—ã—à–µ' if direction == 'above' else '–Ω–∏–∂–µ'}</b> {threshold} —Ä—É–±.\n"
            f"üíπ <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> {current_rate} —Ä—É–±.\n\n"
            f"üí° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n"
            f"üîî –ü—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        
        await update.message.reply_text(
            success_message,
            parse_mode='HTML',
            reply_markup=create_back_button()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /alert: {e}")
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n<code>{str(e)}</code>",
            parse_mode='HTML',
            reply_markup=create_back_button()
        )

async def myalerts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = update.effective_user.id
        alerts = await get_user_alerts(user_id)
        
        if not alerts:
            message = "üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.</b>\n\n"
            message += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            message += "<code>/alert USD RUB 80 above</code>\n"
            message += "—á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∫—É—Ä—Å USD –ø—Ä–µ–≤—ã—Å–∏—Ç 80 —Ä—É–±–ª–µ–π"
            
            keyboard = [
                [InlineKeyboardButton("üí± –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data='create_alert')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            return
        
        message = "üîî <b>–í–ê–®–ò –ê–ö–¢–ò–í–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø</b>\n\n"
        
        for i, alert in enumerate(alerts, 1):
            from_curr = alert['from_currency']
            to_curr = alert['to_currency']
            threshold = alert['threshold']
            direction = alert['direction']
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            rates_today, _, _, _ = get_currency_rates_with_tomorrow()
            current_rate = "N/A"
            if rates_today and from_curr in rates_today:
                current_rate = f"{rates_today[from_curr]['value']:.2f}"
            
            message += (
                f"{i}. <b>{from_curr} ‚Üí {to_curr}</b>\n"
                f"   üéØ –ü–æ—Ä–æ–≥: <b>{threshold} —Ä—É–±.</b>\n"
                f"   üìä –£—Å–ª–æ–≤–∏–µ: –∫—É—Ä—Å <b>{'–≤—ã—à–µ' if direction == 'above' else '–Ω–∏–∂–µ'}</b> {threshold} —Ä—É–±.\n"
                f"   üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: <b>{current_rate} —Ä—É–±.</b>\n\n"
            )
        
        message += "‚è∞ <i>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>\n"
        message += "üí° <i>–ü—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç—Å—è</i>"
        
        keyboard = [
            [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data='clear_all_alerts')],
            [InlineKeyboardButton("üí± –°–æ–∑–¥–∞—Ç—å –µ—â—ë", callback_data='create_alert')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /myalerts: {e}")
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.</b>",
            parse_mode='HTML',
            reply_markup=create_back_button()
        )

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user = update.effective_user
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!" if user.first_name else "–ü—Ä–∏–≤–µ—Ç!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ò–ò
        test_ai = await ask_deepseek("test", context)
        ai_available = not (test_ai.startswith("‚ùå") or test_ai.startswith("‚è∞"))
        
        keyboard = [
            [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='currency_rates')],
            [InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data='crypto_rates')],
            [InlineKeyboardButton("üíé –ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", callback_data='key_rate')],
        ]
        
        if ai_available:
            keyboard.append([InlineKeyboardButton("ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò", callback_data='ai_chat')])
        else:
            keyboard.append([InlineKeyboardButton("‚ùå –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", callback_data='ai_unavailable')])
            
        keyboard.extend([
            [InlineKeyboardButton("üîî –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='my_alerts')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')],
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.effective_message.edit_text(
            f'{greeting} –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == 'help':
            await help_command(update, context)
        elif data == 'back_to_main':
            context.user_data['ai_mode'] = False
            await show_main_menu(update, context)
        elif data == 'currency_rates':
            await show_currency_rates(update, context)
        elif data == 'crypto_rates':
            await show_crypto_rates(update, context)
        elif data == 'key_rate':
            await show_key_rate(update, context)
        elif data == 'ai_chat':
            await show_ai_chat(update, context)
        elif data == 'my_alerts':
            await myalerts_command(update, context)
        elif data == 'clear_all_alerts':
            user_id = update.effective_user.id
            await clear_user_alerts(user_id)
            await query.edit_message_text(
                "‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã",
                reply_markup=create_back_button()
            )
        elif data == 'create_alert':
            await query.edit_message_text(
                "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "<code>/alert USD RUB 80 above</code>\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ <code>/alert USD RUB 85 above</code> - —É–≤–µ–¥–æ–º–∏—Ç –∫–æ–≥–¥–∞ USD –≤—ã—à–µ 85 —Ä—É–±.\n"
                "‚Ä¢ <code>/alert EUR RUB 90 below</code> - —É–≤–µ–¥–æ–º–∏—Ç –∫–æ–≥–¥–∞ EUR –Ω–∏–∂–µ 90 —Ä—É–±.",
                parse_mode='HTML',
                reply_markup=create_back_button()
            )
        elif data == 'ai_examples':
            examples_text = (
                "üí° <b>–ü–†–ò–ú–ï–†–´ –í–û–ü–†–û–°–û–í –î–õ–Ø –ò–ò:</b>\n\n"
                "üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
                "‚Ä¢ –ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –º–∞–ª–µ–Ω—å–∫–æ–π —Å—É–º–º–æ–π?\n"
                "‚Ä¢ –ö–∞–∫–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞ –Ω–∞ –º–µ—Å—è—Ü?\n"
                "‚Ä¢ –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∞–∫—Ü–∏—è–º–∏ –∏ –æ–±–ª–∏–≥–∞—Ü–∏—è–º–∏?\n\n"
                "üìä <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>\n"
                "‚Ä¢ –û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ –±–ª–æ–∫—á–µ–π–Ω –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
                "‚Ä¢ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –Ω–∞ Python?\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∏—Ç—å –≤ 2024?\n\n"
                "üéì <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "‚Ä¢ –ö–∞–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É—á–∏—Ç—å—Å—è –Ω–æ–≤–æ–º—É?\n"
                "‚Ä¢ –û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≠–π–Ω—à—Ç–µ–π–Ω–∞\n"
                "‚Ä¢ –ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –±—É–¥—É—Ç –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω—ã –≤ –±—É–¥—É—â–µ–º?\n\n"
                "üé® <b>–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ:</b>\n"
                "‚Ä¢ –ü—Ä–∏–¥—É–º–∞–π –∏–¥–µ—é –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞ –≤ IT\n"
                "‚Ä¢ –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –¥–∏–∑–∞–π–Ω–µ —Å–µ–π—á–∞—Å –ø–æ–ø—É–ª—è—Ä–Ω—ã?\n\n"
                "üè• <b>–ó–¥–æ—Ä–æ–≤—å–µ:</b>\n"
                "‚Ä¢ –ö–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏?\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —Å–∏–¥—è—á–µ–π —Ä–∞–±–æ—Ç–µ?\n"
                "‚Ä¢ –ö–∞–∫ –±–æ—Ä–æ—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –Ω–∞ —Ä–∞–±–æ—Ç–µ?\n\n"
                "üåç <b>–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:</b>\n"
                "‚Ä¢ –ö—É–¥–∞ –ø–æ–µ—Ö–∞—Ç—å –æ—Ç–¥—ã—Ö–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º?\n"
                "‚Ä¢ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ –≤ –ï–≤—Ä–æ–ø—É?\n"
                "‚Ä¢ –ö–∞–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ?\n\n"
                "üí¨ <b>–ü—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å:</b>\n"
                "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—Å–º–æ—Å–µ\n"
                "‚Ä¢ –ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ?\n"
                "‚Ä¢ –î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –±—É–¥—É—â–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"
            )
            await query.edit_message_text(
                examples_text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ai_chat')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
                ])
            )
        else:
            await query.edit_message_text(
                "üîÑ <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>",
                parse_mode='HTML',
                reply_markup=create_back_button()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
