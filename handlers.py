import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import logger
from services import get_currency_rates_with_tomorrow, format_currency_rates_message, get_key_rate, format_key_rate_message
from services import get_crypto_rates, get_crypto_rates_fallback, format_crypto_rates_message, ask_deepseek
from utils import split_long_message, create_back_button
from db import get_user_alerts, clear_user_alerts, remove_alert, add_alert, update_user_info

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        await update_user_info(user.id, user.first_name, user.username)
        
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!" if user.first_name else "–ü—Ä–∏–≤–µ—Ç!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ò–ò
        test_ai = await ask_deepseek("test", context)
        ai_available = not (test_ai.startswith("‚ùå") or test_ai.startswith("‚è∞"))
        
        keyboard = [
            [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='currency_rates')],
            [InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data='crypto_rates')],
            [InlineKeyboardButton("üíé –ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", callback_data='key_rate')],
        ]
        
        if ai_available:
            keyboard.append([InlineKeyboardButton("ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò", callback_data='ai_chat')])
        else:
            keyboard.append([InlineKeyboardButton("‚ùå –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", callback_data='ai_unavailable')])
            
        keyboard.extend([
            [InlineKeyboardButton("üîî –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='my_alerts')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')],
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        start_message = f'{greeting} –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:'
        await update.message.reply_text(start_message, parse_mode='HTML', reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/rates - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§
/crypto - –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç  
/keyrate - –ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§
/ai - –ß–∞—Ç —Å –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–æ–º
/myalerts - –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/alert - –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° **–ü—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
/alert USD RUB 80 above - —É–≤–µ–¥–æ–º–∏—Ç –∫–æ–≥–¥–∞ USD –ø—Ä–µ–≤—ã—Å–∏—Ç 80 —Ä—É–±.
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == 'help':
            await help_command(update, context)
        elif data == 'back_to_main':
            context.user_data['ai_mode'] = False
            await show_main_menu(update, context)
        elif data == 'currency_rates':
            await show_currency_rates(update, context)
        elif data == 'crypto_rates':
            await show_crypto_rates(update, context)
        elif data == 'key_rate':
            await show_key_rate(update, context)
        elif data == 'ai_chat':
            await show_ai_chat(update, context)
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def show_currency_rates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
    try:
        rates_today, date_today, rates_tomorrow, changes = get_currency_rates_with_tomorrow()
        
        if not rates_today:
            await update.effective_message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.", 
                reply_markup=create_back_button()
            )
            return
        
        message = format_currency_rates_message(rates_today, date_today, rates_tomorrow, changes)
        await update.effective_message.reply_text(message, parse_mode='HTML', reply_markup=create_back_button())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    pass

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ bot.py
