import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from db import init_db, get_user_base_currency, set_user_base_currency, add_alert, update_user_info
import os
from datetime import datetime, date

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")

def get_exchange_rate(from_currency: str, to_currency: str) -> tuple[float | None, str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞–¥–µ–∂–Ω–æ–≥–æ API"""
    # –û—Å–Ω–æ–≤–Ω–æ–µ API - Frankfurter (–±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ)
    url = f"https://api.frankfurter.app/latest?from={from_currency.upper()}&to={to_currency.upper()}"
    
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
        api_date = data.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø–æ–Ω—è—Ç–Ω—ã–π –≤–∏–¥
        if api_date != '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞':
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ YYYY-MM-DD –≤ DD.MM.YYYY
                date_parts = api_date.split('-')
                if len(date_parts) == 3:
                    api_date = f"{date_parts[2]}.{date_parts[1]}.{date_parts[0]}"
            except:
                pass
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
        rate = data['rates'].get(to_currency.upper())
        
        if rate is not None:
            logger.info(f"–ö—É—Ä—Å {from_currency}/{to_currency} = {rate} –ø–æ–ª—É—á–µ–Ω —Å Frankfurter API")
            return rate, api_date
            
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ —Å Frankfurter API: {e}")
    
    # –†–µ–∑–µ—Ä–≤–Ω–æ–µ API - ExchangeRate-API
    try:
        url_fallback = f"https://api.exchangerate-api.com/v4/latest/{from_currency.upper()}"
        response = requests.get(url_fallback, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
        api_date = data.get('time_last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
        if api_date != '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞':
            try:
                api_date = datetime.fromtimestamp(api_date).strftime('%d.%m.%Y')
            except:
                pass
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
        rate = data['rates'].get(to_currency.upper())
        
        if rate is not None:
            logger.info(f"–ö—É—Ä—Å {from_currency}/{to_currency} = {rate} –ø–æ–ª—É—á–µ–Ω —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API")
            return rate, api_date
            
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API: {e}")
    
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å {from_currency}/{to_currency} –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ API")
    return None, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞'

def get_cbr_rates() -> tuple[dict, str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§"""
    try:
        # API –¶–ë –†–§
        url = "https://www.cbr-xml-daily.ru/daily_json.js"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
        cbr_date = data.get('Date', '')
        if cbr_date:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ ISO –≤ DD.MM.YYYY
                date_obj = datetime.fromisoformat(cbr_date.replace('Z', '+00:00'))
                cbr_date = date_obj.strftime('%d.%m.%Y')
            except:
                cbr_date = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞'
        else:
            cbr_date = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞'
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        valutes = data.get('Valute', {})
        rates = {}
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        main_currencies = ['USD', 'EUR', 'GBP', 'JPY', 'CNY', 'CHF', 'CAD', 'AUD']
        for currency in main_currencies:
            if currency in valutes:
                currency_data = valutes[currency]
                rates[currency] = {
                    'value': currency_data['Value'],
                    'name': currency_data['Name'],
                    'previous': currency_data.get('Previous', currency_data['Value'])
                }
        
        return rates, cbr_date
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –¶–ë –†–§: {e}")
        return {}, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î
    await update_user_info(user.id, user.first_name, user.username)
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if user.first_name:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!"
    else:
        greeting = "–ü—Ä–∏–≤–µ—Ç!"
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    keyboard = [
        [InlineKeyboardButton("–ï–≤—Ä–æ (EUR)", callback_data='rate_EUR')],
        [InlineKeyboardButton("–§—É–Ω—Ç (GBP)", callback_data='rate_GBP')],
        [InlineKeyboardButton("–†—É–±–ª—å (RUB)", callback_data='rate_RUB')],
        [InlineKeyboardButton("–ö—É—Ä—Å—ã –¶–ë –†–§", callback_data='cbr_rates')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f'{greeting} –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç!\n\n'
        '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:',
        reply_markup=reply_markup
    )
    
    # –ó–∞—Ç–µ–º —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    await show_today_rates(update, context)

async def show_today_rates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    user = update.effective_user
    user_id = user.id
    base_currency = await get_user_base_currency(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    today = date.today().strftime('%d.%m.%Y')
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Frankfurter API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–π
    popular_currencies = ['USD', 'EUR', 'GBP', 'JPY', 'CNY', 'RUB', 'CHF', 'CAD', 'AUD']
    target_currencies = [curr for curr in popular_currencies if curr != base_currency]
    
    if not target_currencies:
        await update.message.reply_text(f"–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ {base_currency} —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ –≤—Å–µ–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    symbols = ','.join(target_currencies)
    url = f"https://api.frankfurter.app/latest?from={base_currency}&to={symbols}"
    
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ API
        api_date = data.get('date', today)
        if api_date != today:
            try:
                date_parts = api_date.split('-')
                if len(date_parts) == 3:
                    api_date = f"{date_parts[2]}.{date_parts[1]}.{date_parts[0]}"
            except:
                api_date = today
        
        rates_data = data['rates']
        
        message = f"üìä <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ {api_date} –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ {base_currency}:</b>\n\n"
        for curr, rate in rates_data.items():
            message += f"‚Ä¢ {curr}: <b>{rate:.4f}</b>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
        message += f"\nüí° <i>–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {base_currency}</i>"
        
        await update.message.reply_text(message, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ API
        try:
            url_fallback = f"https://api.exchangerate-api.com/v4/latest/{base_currency}"
            response = requests.get(url_fallback, timeout=10)
            response.raise_for_status()
            data = response.json()
            rates_data = data['rates']
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ API
            api_date = data.get('time_last_updated', today)
            if api_date != today:
                try:
                    api_date = datetime.fromtimestamp(api_date).strftime('%d.%m.%Y')
                except:
                    api_date = today
            
            message = f"üìä <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ {api_date} –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ {base_currency}:</b>\n\n"
            for curr in ['USD', 'EUR', 'GBP', 'JPY', 'CNY', 'RUB']:
                if curr != base_currency and curr in rates_data:
                    rate = rates_data[curr]
                    message += f"‚Ä¢ {curr}: <b>{rate:.4f}</b>\n"
            
            message += f"\nüí° <i>–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {base_currency}</i>"
                    
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ API: {e2}")
            await update.message.reply_text(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /rate –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞."
            )

async def cbr_rates_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫—É—Ä—Å–æ–≤ –¶–ë –†–§"""
    await show_cbr_rates(update, context)

async def show_cbr_rates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§"""
    rates_data, cbr_date = get_cbr_rates()
    
    if not rates_data:
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –¶–ë –†–§. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if update.callback_query:
            await update.callback_query.message.reply_text(error_msg)
        else:
            await update.message.reply_text(error_msg)
        return
    
    message = f"üèõ <b>–ö—É—Ä—Å—ã –¶–ë –†–§ –Ω–∞ {cbr_date}:</b>\n\n"
    
    for currency, data in rates_data.items():
        current_value = data['value']
        previous_value = data['previous']
        change = current_value - previous_value
        change_percent = (change / previous_value) * 100 if previous_value else 0
        
        change_icon = "üìà" if change > 0 else "üìâ" if change < 0 else "‚û°Ô∏è"
        change_text = f"{change:+.4f} ({change_percent:+.2f}%)"
        
        message += f"‚Ä¢ {data['name']} ({currency}):\n"
        message += f"  <b>{current_value:.4f} —Ä—É–±.</b> {change_icon} {change_text}\n\n"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_help(update, context)

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    greeting = f", {user.first_name}!" if user.first_name else "!"
    
    help_text = (
        f"–ü—Ä–∏–≤–µ—Ç{greeting} –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç!\n\n"
        
        "ü§ñ <b>–û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ</b>\n\n"
        
        "üí± <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:</b>\n"
        "‚Ä¢ –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤—Å–µ –∫—É—Ä—Å—ã\n"
        "‚Ä¢ <code>/rates</code> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç\n"
        "‚Ä¢ <code>/cbr</code> - –∫—É—Ä—Å—ã –¶–ë –†–§ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏\n"
        "‚Ä¢ <code>/rate EUR USD</code> - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫—É—Ä—Å –º–µ–∂–¥—É –≤–∞–ª—é—Ç–∞–º–∏\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n\n"
        
        "üîÑ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç:</b>\n"
        "‚Ä¢ <code>/convert 100 USD EUR</code> - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—É–º–º—ã\n\n"
        
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        "‚Ä¢ <code>/setbase EUR</code> - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã\n\n"
        
        "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ <code>/alert USD RUB 80 above</code> - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—É—Ä—Å–µ\n\n"
        
        "üí° <b>–ë–´–°–¢–†–´–ô –°–¢–ê–†–¢</b>\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ö—É—Ä—Å—ã –¶–ë –†–§' –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.\n\n"
        
        "‚ùì <b>–ü–û–ú–û–©–¨</b>\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏."
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(help_text, parse_mode='HTML', reply_markup=reply_markup)
    else:
        await update.message.reply_text(help_text, parse_mode='HTML', reply_markup=reply_markup)

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    greeting = f", {user.first_name}!" if user.first_name else "!"
    
    await update.message.reply_text(
        f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è{greeting} –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
        "–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
    )

async def rates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_today_rates(update, context)

async def rate_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rate <–∏–∑> <–≤>")
        return
    from_curr, to_curr = args
    rate, api_date = get_exchange_rate(from_curr, to_curr)
    if rate is not None:
        await update.message.reply_text(f"üí± <b>–ö—É—Ä—Å –Ω–∞ {api_date}:</b>\n1 {from_curr.upper()} = <b>{rate:.4f}</b> {to_curr.upper()}", parse_mode='HTML')
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å.")

async def convert_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    if len(args) != 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /convert <—Å—É–º–º–∞> <–∏–∑> <–≤>")
        return
    try:
        amount = float(args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    from_curr, to_curr = args[1], args[2]
    rate, api_date = get_exchange_rate(from_curr, to_curr)
    if rate is not None:
        result = amount * rate
        await update.message.reply_text(
            f"üí± <b>–ö—É—Ä—Å –Ω–∞ {api_date}:</b>\n"
            f"{amount} {from_curr.upper()} = <b>{result:.4f}</b> {to_curr.upper()}", 
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é.")

async def setbase_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    if len(args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setbase <–≤–∞–ª—é—Ç–∞>")
        return
    currency = args[0].upper()
    user_id = update.effective_message.from_user.id
    await set_user_base_currency(user_id, currency)
    await update.message.reply_text(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {currency}")

async def alert_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    if len(args) != 4:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /alert <–∏–∑> <–≤> <–ø–æ—Ä–æ–≥> <above|below>")
        return
    from_curr, to_curr = args[0], args[1]
    try:
        threshold = float(args[2])
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    direction = args[3].lower()
    if direction not in ['above', 'below']:
        await update.message.reply_text("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'above' –∏–ª–∏ 'below'.")
        return
    user_id = update.effective_message.from_user.id
    await add_alert(user_id, from_curr, to_curr, threshold, direction)
    await update.message.reply_text(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {from_curr}/{to_curr} {'>' if direction == 'above' else '<'} {threshold}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == 'help':
        await show_help(update, context)
    elif data == 'back_to_main':
        user = query.from_user
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if user.first_name:
            greeting = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!"
        else:
            greeting = "–ü—Ä–∏–≤–µ—Ç!"
        
        keyboard = [
            [InlineKeyboardButton("–ï–≤—Ä–æ (EUR)", callback_data='rate_EUR')],
            [InlineKeyboardButton("–§—É–Ω—Ç (GBP)", callback_data='rate_GBP')],
            [InlineKeyboardButton("–†—É–±–ª—å (RUB)", callback_data='rate_RUB')],
            [InlineKeyboardButton("–ö—É—Ä—Å—ã –¶–ë –†–§", callback_data='cbr_rates')],
            [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')],
            [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f'{greeting} –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç!\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:',
            reply_markup=reply_markup
        )
    elif data == 'cbr_rates':
        await show_cbr_rates(update, context)
    elif data == 'settings':
        user_id = query.from_user.id
        base_currency = await get_user_base_currency(user_id)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
            f"‚Ä¢ –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: <b>{base_currency}</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setbase <–≤–∞–ª—é—Ç–∞> –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã.",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    elif data.startswith('rate_'):
        currency = data.split('_')[1]
        user_id = query.from_user.id
        base_currency = await get_user_base_currency(user_id)
        rate, api_date = get_exchange_rate(base_currency, currency)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if rate is not None:
            await query.edit_message_text(
                f"üí± <b>–ö—É—Ä—Å –Ω–∞ {api_date}:</b>\n"
                f"1 {base_currency} = <b>{rate:.4f}</b> {currency}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rates –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –∏–ª–∏ /convert –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—É–º–º.",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=reply_markup
            )

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

async def post_init(application: Application) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    await init_db()
    print("–ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º application
    application = Application.builder().token(TOKEN).post_init(post_init).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stop", stop_command))
    application.add_handler(CommandHandler("rates", rates))
    application.add_handler(CommandHandler("cbr", cbr_rates_command))
    application.add_handler(CommandHandler("rate", rate_command))
    application.add_handler(CommandHandler("convert", convert_command))
    application.add_handler(CommandHandler("setbase", setbase_command))
    application.add_handler(CommandHandler("alert", alert_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()
