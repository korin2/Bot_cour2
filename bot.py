import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from db import init_db, get_user_base_currency, set_user_base_currency, add_alert, get_all_alerts, update_user_info
import os
import asyncio

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")

def get_exchange_rate(from_currency: str, to_currency: str) -> float | None:
    url = f"https://api.exchangerate-api.com/v4/latest/{from_currency.upper()}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        rate = data['rates'].get(to_currency.upper())
        return rate
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ {from_currency}/{to_currency}: {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î
    await update_user_info(user.id, user.first_name, user.username)
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if user.first_name:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!"
    else:
        greeting = "–ü—Ä–∏–≤–µ—Ç!"
    
    keyboard = [
        [InlineKeyboardButton("–ï–≤—Ä–æ (EUR)", callback_data='rate_EUR')],
        [InlineKeyboardButton("–§—É–Ω—Ç (GBP)", callback_data='rate_GBP')],
        [InlineKeyboardButton("–†—É–±–ª—å (RUB)", callback_data='rate_RUB')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ update —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ callback query
    if update.message:
        await update.message.reply_text(
            f'{greeting} –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç!\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏:\n'
            '/rates ‚Äî –∫—É—Ä—Å—ã –∫ –≤–∞—à–µ–π –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ\n'
            '/rate <–∏–∑> <–≤> ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, /rate EUR RUB\n'
            '/convert <—Å—É–º–º–∞> <–∏–∑> <–≤> ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, /convert 100 USD RUB\n'
            '/setbase <–≤–∞–ª—é—Ç–∞> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É\n'
            '/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞',
            reply_markup=reply_markup
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            f'{greeting} –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç!\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏:\n'
            '/rates ‚Äî –∫—É—Ä—Å—ã –∫ –≤–∞—à–µ–π –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ\n'
            '/rate <–∏–∑> <–≤> ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, /rate EUR RUB\n'
            '/convert <—Å—É–º–º–∞> <–∏–∑> <–≤> ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, /convert 100 USD RUB\n'
            '/setbase <–≤–∞–ª—é—Ç–∞> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É\n'
            '/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞',
            reply_markup=reply_markup
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_help(update, context)

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    greeting = f", {user.first_name}!" if user.first_name else "!"
    
    help_text = (
        f"–ü—Ä–∏–≤–µ—Ç{greeting} –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç!\n\n"
        "üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç\n"
        "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ª—é–±—ã—Ö —Å—É–º–º\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã\n\n"
        "üîÑ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/rates ‚Äî –∫—É—Ä—Å—ã –∫ –≤–∞—à–µ–π –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ\n"
        "/rate <–∏–∑> <–≤> ‚Äî –∫—É—Ä—Å –º–µ–∂–¥—É –¥–≤—É–º—è –≤–∞–ª—é—Ç–∞–º–∏\n"
        "/convert <—Å—É–º–º–∞> <–∏–∑> <–≤> ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—É–º–º—ã\n"
        "/setbase <–≤–∞–ª—é—Ç–∞> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É\n"
        "/alert <–∏–∑> <–≤> <–ø–æ—Ä–æ–≥> <above|below> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        "/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
        "<code>/rate EUR USD</code> ‚Äî –∫—É—Ä—Å –µ–≤—Ä–æ –∫ –¥–æ–ª–ª–∞—Ä—É\n"
        "<code>/convert 100 USD RUB</code> ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è 100 –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Ä—É–±–ª–∏\n"
        "<code>/setbase EUR</code> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≤—Ä–æ –∫–∞–∫ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É\n"
        "<code>/alert USD RUB 80 above</code> ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å, –∫–æ–≥–¥–∞ –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é –ø—Ä–µ–≤—ã—Å–∏—Ç 80\n\n"
        "üìà <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n"
        "USD, EUR, GBP, RUB, JPY, CNY, CHF –∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ!"
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(help_text, parse_mode='HTML', reply_markup=reply_markup)
    else:
        await update.message.reply_text(help_text, parse_mode='HTML', reply_markup=reply_markup)

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    greeting = f", {user.first_name}!" if user.first_name else "!"
    
    await update.message.reply_text(
        f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è{greeting} –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
        "–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
    )
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    await context.application.stop()

async def rates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = user.id
    base_currency = await get_user_base_currency(user_id)
    
    greeting = f", {user.first_name}!" if user.first_name else "!"
    
    url = f"https://api.exchangerate-api.com/v4/latest/{base_currency}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        rates = data['rates']
        message = f"–ü—Ä–∏–≤–µ—Ç{greeting} –ö—É—Ä—Å—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ {base_currency}:\n"
        for curr, rate in list(rates.items())[:5]:  # –ø–µ—Ä–≤—ã–µ 5
            message += f"{curr}: {rate:.4f}\n"
        await update.message.reply_text(message)
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç{greeting} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.")

async def rate_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rate <–∏–∑> <–≤>")
        return
    from_curr, to_curr = args
    rate = get_exchange_rate(from_curr, to_curr)
    if rate is not None:
        await update.message.reply_text(f"1 {from_curr.upper()} = {rate:.4f} {to_curr.upper()}")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å.")

async def convert_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    if len(args) != 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /convert <—Å—É–º–º–∞> <–∏–∑> <–≤>")
        return
    try:
        amount = float(args[0])
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    from_curr, to_curr = args[1], args[2]
    rate = get_exchange_rate(from_curr, to_curr)
    if rate is not None:
        result = amount * rate
        await update.message.reply_text(f"{amount} {from_curr.upper()} = {result:.4f} {to_curr.upper()}")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é.")

async def setbase_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    if len(args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setbase <–≤–∞–ª—é—Ç–∞>")
        return
    currency = args[0].upper()
    user_id = update.effective_message.from_user.id
    await set_user_base_currency(user_id, currency)
    await update.message.reply_text(f"–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {currency}")

async def alert_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    if len(args) != 4:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /alert <–∏–∑> <–≤> <–ø–æ—Ä–æ–≥> <above|below>")
        return
    from_curr, to_curr = args[0], args[1]
    try:
        threshold = float(args[2])
    except ValueError:
        await update.message.reply_text("–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    direction = args[3].lower()
    if direction not in ['above', 'below']:
        await update.message.reply_text("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'above' –∏–ª–∏ 'below'.")
        return
    user_id = update.effective_message.from_user.id
    await add_alert(user_id, from_curr, to_curr, threshold, direction)
    await update.message.reply_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {from_curr}/{to_curr} {'>' if direction == 'above' else '<'} {threshold}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == 'help':
        await show_help(update, context)
    elif data == 'back_to_main':
        await start(update, context)
    elif data == 'settings':
        user_id = query.from_user.id
        base_currency = await get_user_base_currency(user_id)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {base_currency}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setbase <–≤–∞–ª—é—Ç–∞> –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã.",
            reply_markup=reply_markup
        )
    elif data.startswith('rate_'):
        currency = data.split('_')[1]
        user_id = query.from_user.id
        base_currency = await get_user_base_currency(user_id)
        rate = get_exchange_rate(base_currency, currency)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if rate is not None:
            await query.edit_message_text(
                f"1 {base_currency} = {rate:.4f} {currency}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rates –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –∏–ª–∏ /convert –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—É–º–º.",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=reply_markup
            )

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º application
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stop", stop_command))
    application.add_handler(CommandHandler("rates", rates))
    application.add_handler(CommandHandler("rate", rate_command))
    application.add_handler(CommandHandler("convert", convert_command))
    application.add_handler(CommandHandler("setbase", setbase_command))
    application.add_handler(CommandHandler("alert", alert_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        loop.run_until_complete(init_db())
        print("–ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        loop.close()

if __name__ == '__main__':
    main()
