import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from db import init_db, add_alert, update_user_info, get_all_users, get_user_alerts, remove_alert, get_all_active_alerts, clear_user_alerts
import os
from datetime import datetime, timedelta
import asyncio
import xml.etree.ElementTree as ET
import json
from bs4 import BeautifulSoup

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")

DEEPSEEK_API_KEY = os.getenv('TG_BOT_APIDEEPSEEK')
if not DEEPSEEK_API_KEY:
    logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω API –∫–ª—é—á DeepSeek. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ò–ò –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API –¶–ë –†–§
CBR_API_BASE = "https://www.cbr.ru/"
# CoinGecko API –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
COINGECKO_API_BASE = "https://api.coingecko.com/api/v3/"
# DeepSeek API
DEEPSEEK_API_BASE = "https://api.deepseek.com/v1/"

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ò–ò DEEPSEEK
# =============================================================================

async def ask_deepseek(prompt: str, context: ContextTypes.DEFAULT_TYPE = None) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API DeepSeek –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
    if not DEEPSEEK_API_KEY:
        return "‚ùå –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á."
    
    try:
        url = f"{DEEPSEEK_API_BASE}chat/completions"
        
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {DEEPSEEK_API_KEY}'
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
        system_message = """–¢—ã - —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ:
- –ö—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç –¶–ë –†–§
- –ö–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–µ –¶–ë –†–§  
- –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
- –§–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
- –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö
- –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤, –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏, —á—Ç–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö."""
        
        data = {
            "model": "deepseek-chat",
            "messages": [
                {"role": "system", "content": system_message},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.7,
            "max_tokens": 1000,
            "stream": False
        }
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API: {prompt[:100]}...")
        
        response = requests.post(url, headers=headers, json=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            answer = result['choices'][0]['message']['content']
            logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API")
            return answer
        elif response.status_code == 402:
            logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É DeepSeek API")
            return "‚ùå –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ API –∞–∫–∫–∞—É–Ω—Ç–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        elif response.status_code == 401:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á DeepSeek")
            return "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
        elif response.status_code == 429:
            logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ DeepSeek API")
            return "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            error_msg = f"–û—à–∏–±–∫–∞ API DeepSeek: {response.status_code} - {response.text}"
            logger.error(error_msg)
            return f"‚ùå –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
    except requests.exceptions.Timeout:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API")
        return "‚è∞ –ò–ò –Ω–µ —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except requests.exceptions.RequestException as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å DeepSeek API: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def handle_ai_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ò–ò"""
    try:
        user_id = update.effective_user.id
        user_message = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
        if user_message.startswith('/'):
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ä–µ–∂–∏–º –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if context.user_data.get('ai_mode') != True:
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update.message.chat.send_action(action="typing")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ DeepSeek
        ai_response = await ask_deepseek(user_message, context)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(
            f"ü§ñ <b>–ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:</b>\n\n{ai_response}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data='ai_chat')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ò–ò —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
            ])
        )

async def show_ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ —Å –ò–ò"""
    try:
        if not DEEPSEEK_API_KEY:
            error_msg = (
                "‚ùå <b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á DeepSeek. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(error_msg, parse_mode='HTML', reply_markup=reply_markup)
            else:
                await update.message.reply_text(error_msg, parse_mode='HTML', reply_markup=reply_markup)
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        test_response = await ask_deepseek("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", context)
        if test_response.startswith("‚ùå") or test_response.startswith("‚è∞"):
            # –ï—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_msg = (
                "‚ùå <b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                f"{test_response}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞."
            )
            keyboard = [
                [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='currency_rates')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(error_msg, parse_mode='HTML', reply_markup=reply_markup)
            else:
                await update.message.reply_text(error_msg, parse_mode='HTML', reply_markup=reply_markup)
            return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['ai_mode'] = True
        
        welcome_message = (
            "ü§ñ <b>–ò–ò –§–ò–ù–ê–ù–°–û–í–´–ô –ü–û–ú–û–©–ù–ò–ö</b>\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–∞–º:\n"
            "‚Ä¢ üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
            "‚Ä¢ üíé –ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§\n"
            "‚Ä¢ ‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n"
            "‚Ä¢ üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "‚Ä¢ üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!\n\n"
            "<i>–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –ò–ò –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'</i>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data='ai_examples')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(welcome_message, parse_mode='HTML', reply_markup=reply_markup)
        else:
            await update.message.reply_text(welcome_message, parse_mode='HTML', reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —á–∞—Ç–∞ —Å –ò–ò: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.callback_query:
            await update.callback_query.message.reply_text(error_msg, reply_markup=reply_markup)
        else:
            await update.message.reply_text(error_msg, reply_markup=reply_markup)

async def show_ai_examples(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ò–ò"""
    try:
        examples_text = (
            "üí° <b>–ü–†–ò–ú–ï–†–´ –í–û–ü–†–û–°–û–í –î–õ–Ø –ò–ò</b>\n\n"
            "<b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:</b>\n"
            "‚Ä¢ –ö–∞–∫–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é?\n"
            "‚Ä¢ –ü–æ—á–µ–º—É –µ–≤—Ä–æ —É–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ç–∏–≤ —Ä—É–±–ª—è?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ –∫—É—Ä—Å —é–∞–Ω—è?\n\n"
            
            "<b>–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞:</b>\n"
            "‚Ä¢ –ö–æ–≥–¥–∞ –¶–ë –†–§ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É?\n"
            "‚Ä¢ –ö–∞–∫ –∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –∏–Ω—Ñ–ª—è—Ü–∏—é?\n"
            "‚Ä¢ –ö–∞–∫–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –≤ —ç—Ç–æ–º –≥–æ–¥—É?\n\n"
            
            "<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n"
            "‚Ä¢ –°—Ç–æ–∏—Ç –ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Bitcoin —Å–µ–π—á–∞—Å?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —É Ethereum?\n"
            "‚Ä¢ –ö–∞–∫ —Ä–µ–≥—É–ª–∏—Ä—É—é—Ç—Å—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ –†–æ—Å—Å–∏–∏?\n\n"
            
            "<b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:</b>\n"
            "‚Ä¢ –í–æ —á—Ç–æ –ª—É—á—à–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —Ä–∏—Å–∫–∏ —É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –∞–∫—Ü–∏–∏?\n"
            "‚Ä¢ –ö–∞–∫ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å?\n\n"
            
            "<b>–≠–∫–æ–Ω–æ–º–∏–∫–∞:</b>\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö?\n"
            "‚Ä¢ –ö–∞–∫ –∏–Ω—Ñ–ª—è—Ü–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫—É?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –µ—Å—Ç—å –¥–ª—è –±–∏–∑–Ω–µ—Å–∞?\n\n"
            
            "<i>–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π!</i>"
        )
        
        keyboard = [
            [InlineKeyboardButton("ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ai_chat')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(examples_text, parse_mode='HTML', reply_markup=reply_markup)
        else:
            await update.message.reply_text(examples_text, parse_mode='HTML', reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –ò–ò: {e}")

async def show_ai_unavailable(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ò–ò"""
    try:
        message = (
            "‚ùå <b>–ò–ò –ü–û–ú–û–©–ù–ò–ö –í–†–ï–ú–ï–ù–ù–û –ù–ï–î–û–°–¢–£–ü–ï–ù</b>\n\n"
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ API –∞–∫–∫–∞—É–Ω—Ç–µ\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º DeepSeek\n"
            "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n"
            "‚Ä¢ üí± <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç</b> - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –¶–ë –†–§\n"
            "‚Ä¢ ‚Çø <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</b> - –∫—É—Ä—Å—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
            "‚Ä¢ üíé <b>–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞</b> - —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§\n"
            "‚Ä¢ üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - –∞–ª–µ—Ä—Ç—ã –ø–æ –∫—É—Ä—Å–∞–º –≤–∞–ª—é—Ç\n\n"
            "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ò–ò."
        )
        
        keyboard = [
            [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='currency_rates')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ò–ò: {e}")

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–£–†–°–ê–ú–ò –í–ê–õ–Æ–¢ –¶–ë –†–§
# =============================================================================

def get_currency_rates_for_date(date_req):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        url = f"{CBR_API_BASE}scripts/XML_daily.asp"
        params = {'date_req': date_req}
        
        response = requests.get(url, params=params, timeout=10)
        if response.status_code != 200:
            return None, None
        
        root = ET.fromstring(response.content)
        cbr_date = root.get('Date', '')
        
        rates = {}
        currency_codes = {
            'R01235': 'USD',  'R01239': 'EUR',  'R01035': 'GBP',  'R01820': 'JPY',
            'R01375': 'CNY',  'R01775': 'CHF',  'R01350': 'CAD',  'R01010': 'AUD',
            'R01700': 'TRY',  'R01335': 'KZT',
        }
        
        for valute in root.findall('Valute'):
            valute_id = valute.get('ID')
            if valute_id in currency_codes:
                currency_code = currency_codes[valute_id]
                name = valute.find('Name').text
                value = float(valute.find('Value').text.replace(',', '.'))
                nominal = int(valute.find('Nominal').text)
                
                if nominal > 1:
                    value = value / nominal
                
                rates[currency_code] = {
                    'value': value,
                    'name': name,
                    'nominal': nominal
                }
        
        return rates, cbr_date
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –Ω–∞ –¥–∞—Ç—É {date_req}: {e}")
        return None, None

def get_currency_rates_with_tomorrow():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)"""
    try:
        today = datetime.now()
        tomorrow = today + timedelta(days=1)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        date_today = today.strftime('%d/%m/%Y')
        date_tomorrow = tomorrow.strftime('%d/%m/%Y')
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        rates_today, date_today_str = get_currency_rates_for_date(date_today)
        if not rates_today:
            return {}, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞', None, None
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        rates_tomorrow, date_tomorrow_str = get_currency_rates_for_date(date_tomorrow)
        
        # –ï—Å–ª–∏ –∫—É—Ä—Å—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ
        if not rates_tomorrow:
            return rates_today, date_today_str, None, None
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –∫—É—Ä—Å–æ–≤
        changes = {}
        for currency, today_data in rates_today.items():
            if currency in rates_tomorrow:
                today_value = today_data['value']
                tomorrow_value = rates_tomorrow[currency]['value']
                change = tomorrow_value - today_value
                change_percent = (change / today_value) * 100 if today_value > 0 else 0
                
                changes[currency] = {
                    'change': change,
                    'change_percent': change_percent
                }
        
        return rates_today, date_today_str, rates_tomorrow, changes
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {e}")
        return {}, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞', None, None

def format_currency_rates_message(rates_today: dict, date_today: str, 
                                rates_tomorrow: dict = None, changes: dict = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞"""
    if not rates_today:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§."
    
    message = f"üí± <b>–ö–£–†–°–´ –í–ê–õ–Æ–¢ –¶–ë –†–§</b>\n"
    message += f"üìÖ <i>–Ω–∞ {date_today}</i>\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã (–¥–æ–ª–ª–∞—Ä, –µ–≤—Ä–æ)
    main_currencies = ['USD', 'EUR']
    for currency in main_currencies:
        if currency in rates_today:
            data = rates_today[currency]
            
            message += f"üíµ <b>{data['name']}</b> ({currency}):\n"
            message += f"   <b>{data['value']:.2f} —Ä—É–±.</b>\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            if rates_tomorrow and currency in rates_tomorrow and currency in changes:
                tomorrow_data = rates_tomorrow[currency]
                change_info = changes[currency]
                change_icon = "üìà" if change_info['change'] > 0 else "üìâ" if change_info['change'] < 0 else "‚û°Ô∏è"
                
                message += f"   <i>–ó–∞–≤—Ç—Ä–∞: {tomorrow_data['value']:.2f} —Ä—É–±. {change_icon}</i>\n"
                message += f"   <i>–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_info['change']:+.2f} —Ä—É–±. ({change_info['change_percent']:+.2f}%)</i>\n"
            
            message += "\n"
    
    # –î—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã
    other_currencies = [curr for curr in rates_today.keys() if curr not in main_currencies]
    if other_currencies:
        message += "üåç <b>–î—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã:</b>\n"
        
        for currency in other_currencies:
            data = rates_today[currency]
            
            # –î–ª—è JPY –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞ 100 –µ–¥–∏–Ω–∏—Ü
            if currency == 'JPY':
                display_value = data['value'] * 100
                currency_text = f"   {data['name']} ({currency}): <b>{display_value:.2f} —Ä—É–±.</b>"
            else:
                currency_text = f"   {data['name']} ({currency}): <b>{data['value']:.2f} —Ä—É–±.</b>"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–≤—Ç—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if rates_tomorrow and currency in rates_tomorrow and currency in changes:
                change_info = changes[currency]
                change_icon = "üìà" if change_info['change'] > 0 else "üìâ" if change_info['change'] < 0 else "‚û°Ô∏è"
                currency_text += f" {change_icon}"
            
            message += currency_text + "\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –∫—É—Ä—Å–æ–≤
    if rates_tomorrow:
        tomorrow_date = (datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y')
        message += f"\nüìä <i>–ö—É—Ä—Å—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow_date}) –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –¶–ë –†–§</i>"
    else:
        message += f"\nüí° <i>–ö—É—Ä—Å—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –¶–ë –†–§ –ø–æ–∑–∂–µ</i>"
    
    message += f"\n\nüí° <i>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –¶–ë –†–§ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞</i>"
    return message

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–õ–Æ–ß–ï–í–û–ô –°–¢–ê–í–ö–û–ô –¶–ë –†–§
# =============================================================================

def get_key_rate():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¶–ë –†–§ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤"""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ HTML —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    key_rate_data = get_key_rate_html()
    if key_rate_data:
        return key_rate_data
    
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º API
    logger.info("–ü–∞—Ä—Å–∏–Ω–≥ HTML –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º API...")
    key_rate_data = get_key_rate_api()
    if key_rate_data:
        return key_rate_data
    
    # –ï—Å–ª–∏ –æ–±–∞ –º–µ—Ç–æ–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ")
    return get_key_rate_demo()

def get_key_rate_html():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ —Å —Å–∞–π—Ç–∞ –¶–ë –†–§"""
    try:
        url = "https://cbr.ru/hd_base/KeyRate/"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Referer': 'https://www.cbr.ru/',
            'Connection': 'keep-alive',
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã –Ω–µ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ –±–æ—Ç
        import time
        time.sleep(1)
        
        response = requests.get(url, headers=headers, timeout=15)
        
        if response.status_code == 403:
            logger.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403) –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ HTML")
            return None
        elif response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP {response.status_code} –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ HTML")
            return None
            
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏
        table = soup.find('table', class_='data')
        if table:
            rows = table.find_all('tr')
            for i in range(1, min(len(rows), 10)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                cells = rows[i].find_all('td')
                if len(cells) >= 2:
                    date_str = cells[0].get_text(strip=True)
                    rate_str = cells[1].get_text(strip=True).replace(',', '.')
                    
                    try:
                        date_obj = datetime.strptime(date_str, '%d.%m.%Y')
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
                        if date_obj <= datetime.now():
                            rate_value = float(rate_str)
                            
                            return {
                                'rate': rate_value,
                                'date': date_obj.strftime('%d.%m.%Y'),
                                'is_current': True,
                                'source': 'cbr_parsed'
                            }
                    except ValueError:
                        continue
        
        return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ HTML –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏: {e}")
        return None

def get_key_rate_api():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ API –¶–ë –†–§"""
    try:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL –¥–ª—è –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏
        url = "https://www.cbr.ru/hd_base/KeyRate/?UniDbQuery.Posted=True&UniDbQuery.From=01.01.2020&UniDbQuery.To=31.12.2025"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            table = soup.find('table', class_='data')
            
            if table:
                rows = table.find_all('tr')
                for i in range(1, min(len(rows), 5)):  # –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                    cells = rows[i].find_all('td')
                    if len(cells) >= 2:
                        date_str = cells[0].get_text(strip=True)
                        rate_str = cells[1].get_text(strip=True).replace(',', '.')
                        
                        try:
                            date_obj = datetime.strptime(date_str, '%d.%m.%Y')
                            if date_obj <= datetime.now():
                                rate_value = float(rate_str)
                                
                                return {
                                    'rate': rate_value,
                                    'date': date_str,
                                    'is_current': True,
                                    'source': 'cbr_api'
                                }
                        except ValueError:
                            continue
        return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ API: {e}")
        return None

def get_key_rate_demo():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏"""
    return {
        'rate': 16.0,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        'date': datetime.now().strftime('%d.%m.%Y'),
        'is_current': True,
        'source': 'demo'
    }

def format_key_rate_message(key_rate_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–æ–π"""
    if not key_rate_data:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–µ –æ—Ç –¶–ë –†–§."
    
    rate = key_rate_data['rate']
    source = key_rate_data.get('source', 'unknown')
    
    message = f"üíé <b>–ö–õ–Æ–ß–ï–í–ê–Ø –°–¢–ê–í–ö–ê –¶–ë –†–§</b>\n\n"
    message += f"<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {rate:.2f}%\n"
    message += f"\n<b>–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</b> {key_rate_data.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
    message += "üí° <i>–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§,\n"
    message += "–∫–æ—Ç–æ—Ä–∞—è –≤–ª–∏—è–µ—Ç –Ω–∞ –∫—Ä–µ–¥–∏—Ç—ã, –¥–µ–ø–æ–∑–∏—Ç—ã –∏ —ç–∫–æ–Ω–æ–º–∏–∫—É –≤ —Ü–µ–ª–æ–º</i>"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö
    if source == 'cbr_parsed':
        message += f"\n\n‚úÖ <i>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –¶–ë –†–§</i>"
    elif source == 'cbr_api':
        message += f"\n\n‚úÖ <i>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ API –¶–ë –†–§</i>"
    elif source == 'demo':
        message += f"\n\n‚ö†Ô∏è <i>–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö)</i>"
    
    return message

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ê–ú–ò
# =============================================================================

def get_crypto_rates():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ CoinGecko API"""
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        crypto_ids = [
            'bitcoin', 'ethereum', 'binancecoin', 'ripple', 'cardano',
            'solana', 'polkadot', 'dogecoin', 'tron', 'litecoin'
        ]
        
        url = f"{COINGECKO_API_BASE}simple/price"
        params = {
            'ids': ','.join(crypto_ids),
            'vs_currencies': 'rub,usd',
            'include_24hr_change': 'true',
            'include_last_updated_at': 'true'
        }
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'application/json'
        }
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ CoinGecko API: {url}")
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        
        response = requests.get(url, params=params, headers=headers, timeout=15)
        
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ CoinGecko API: {response.status_code}")
            logger.error(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return None
            
        data = response.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç CoinGecko: {type(data)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if not isinstance(data, dict):
            logger.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –æ–∂–∏–¥–∞–ª—Å—è dict, –ø–æ–ª—É—á–µ–Ω {type(data)}")
            return None
            
        # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        crypto_names = {
            'bitcoin': {'name': 'Bitcoin', 'symbol': 'BTC'},
            'ethereum': {'name': 'Ethereum', 'symbol': 'ETH'},
            'binancecoin': {'name': 'Binance Coin', 'symbol': 'BNB'},
            'ripple': {'name': 'XRP', 'symbol': 'XRP'},
            'cardano': {'name': 'Cardano', 'symbol': 'ADA'},
            'solana': {'name': 'Solana', 'symbol': 'SOL'},
            'polkadot': {'name': 'Polkadot', 'symbol': 'DOT'},
            'dogecoin': {'name': 'Dogecoin', 'symbol': 'DOGE'},
            'tron': {'name': 'TRON', 'symbol': 'TRX'},
            'litecoin': {'name': 'Litecoin', 'symbol': 'LTC'}
        }
        
        crypto_rates = {}
        valid_count = 0
        
        for crypto_id, info in crypto_names.items():
            if crypto_id in data:
                crypto_data = data[crypto_id]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ crypto_data - —Å–ª–æ–≤–∞—Ä—å
                if not isinstance(crypto_data, dict):
                    logger.warning(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {crypto_id} –Ω–µ —Å–ª–æ–≤–∞—Ä—å: {type(crypto_data)}")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                price_rub = crypto_data.get('rub')
                price_usd = crypto_data.get('usd')
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥ —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏)
                change_24h = crypto_data.get('rub_24h_change') or crypto_data.get('usd_24h_change') or 0
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω—ã –µ—Å—Ç—å –∏ –æ–Ω–∏ —á–∏—Å–ª–∞
                if price_rub is None or price_usd is None:
                    logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ü–µ–Ω—ã –¥–ª—è {crypto_id}: RUB={price_rub}, USD={price_usd}")
                    continue
                
                try:
                    price_rub = float(price_rub)
                    price_usd = float(price_usd)
                    change_24h = float(change_24h) if change_24h is not None else 0
                except (TypeError, ValueError) as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {crypto_id}: {e}")
                    continue
                
                crypto_rates[crypto_id] = {
                    'name': info['name'],
                    'symbol': info['symbol'],
                    'price_rub': price_rub,
                    'price_usd': price_usd,
                    'change_24h': change_24h,
                    'last_updated': crypto_data.get('last_updated_at', 0)
                }
                valid_count += 1
            else:
                logger.warning(f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {crypto_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ API")
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {valid_count} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        
        if crypto_rates:
            crypto_rates['update_time'] = datetime.now().strftime('%d.%m.%Y %H:%M')
            crypto_rates['source'] = 'coingecko'
            return crypto_rates
        else:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º –≤ –æ—Ç–≤–µ—Ç–µ API")
            return None
            
    except requests.exceptions.RequestException as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        return None
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç CoinGecko: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        return None

def get_crypto_rates_fallback():
    """–†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ)"""
    try:
        # –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        crypto_rates = {
            'bitcoin': {
                'name': 'Bitcoin',
                'symbol': 'BTC',
                'price_rub': 4500000.0,
                'price_usd': 50000.0,
                'change_24h': 2.5,
                'last_updated': datetime.now().timestamp()
            },
            'ethereum': {
                'name': 'Ethereum', 
                'symbol': 'ETH',
                'price_rub': 300000.0,
                'price_usd': 3300.0,
                'change_24h': 1.2,
                'last_updated': datetime.now().timestamp()
            },
            'binancecoin': {
                'name': 'Binance Coin',
                'symbol': 'BNB', 
                'price_rub': 35000.0,
                'price_usd': 380.0,
                'change_24h': -0.5,
                'last_updated': datetime.now().timestamp()
            },
            'ripple': {
                'name': 'XRP',
                'symbol': 'XRP',
                'price_rub': 60.0,
                'price_usd': 0.65,
                'change_24h': 0.8,
                'last_updated': datetime.now().timestamp()
            },
            'cardano': {
                'name': 'Cardano',
                'symbol': 'ADA',
                'price_rub': 45.0,
                'price_usd': 0.48,
                'change_24h': -1.2,
                'last_updated': datetime.now().timestamp()
            }
        }
        
        crypto_rates['update_time'] = datetime.now().strftime('%d.%m.%Y %H:%M')
        crypto_rates['source'] = 'demo_fallback'
        
        logger.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        return crypto_rates
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ fallback —Ñ—É–Ω–∫—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        return None

def format_crypto_rates_message(crypto_rates: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    if not crypto_rates:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –æ—Ç CoinGecko API."
    
    message = f"‚Çø <b>–ö–£–†–°–´ –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢</b>\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–ø–µ—Ä–≤—ã–µ 5)
    main_cryptos = ['bitcoin', 'ethereum', 'binancecoin', 'ripple', 'cardano']
    
    for crypto_id in main_cryptos:
        if crypto_id in crypto_rates:
            data = crypto_rates[crypto_id]
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            name = data.get('name', 'N/A')
            symbol = data.get('symbol', 'N/A')
            price_rub = data.get('price_rub', 0)
            price_usd = data.get('price_usd', 0)
            change_24h = data.get('change_24h', 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            try:
                price_rub = float(price_rub)
                price_usd = float(price_usd)
                change_24h = float(change_24h)
            except (TypeError, ValueError):
                continue
            
            change_icon = "üìà" if change_24h > 0 else "üìâ" if change_24h < 0 else "‚û°Ô∏è"
            
            message += (
                f"<b>{name} ({symbol})</b>\n"
                f"   üí∞ <b>{price_rub:,.0f} —Ä—É–±.</b>\n"
                f"   üíµ {price_usd:,.2f} $\n"
                f"   {change_icon} <i>{change_24h:+.2f}% (24—á)</i>\n\n"
            )
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    other_cryptos = [crypto_id for crypto_id in crypto_rates.keys() 
                    if crypto_id not in main_cryptos and crypto_id not in ['update_time', 'source']]
    
    if other_cryptos:
        message += "üîπ <b>–î—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n"
        
        for crypto_id in other_cryptos:
            data = crypto_rates[crypto_id]
            symbol = data.get('symbol', 'N/A')
            price_rub = data.get('price_rub', 0)
            change_24h = data.get('change_24h', 0)
            
            try:
                price_rub = float(price_rub)
                change_24h = float(change_24h)
            except (TypeError, ValueError):
                continue
            
            change_icon = "üìà" if change_24h > 0 else "üìâ" if change_24h < 0 else "‚û°Ô∏è"
            
            message += (
                f"   <b>{symbol}</b>: {price_rub:,.0f} —Ä—É–±. {change_icon}\n"
            )
    
    message += f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {crypto_rates.get('update_time', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</i>\n\n"
    message += "üí° <i>–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã CoinGecko API</i>"
    
    if crypto_rates.get('source') == 'coingecko':
        message += f"\n\n‚úÖ <i>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ CoinGecko</i>"
    
    return message

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò
# =============================================================================

async def check_alerts(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        rates_today, date_today, _, _ = get_currency_rates_with_tomorrow()
        
        if not rates_today:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        alerts = await get_all_active_alerts()
        
        if not alerts:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
        
        triggered_alerts = []
        
        for alert in alerts:
            try:
                from_curr = alert['from_currency'].upper()
                to_curr = alert['to_currency'].upper()
                threshold = float(alert['threshold'])
                direction = alert['direction']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞–ª—é—Ç—ã
                if from_curr not in rates_today:
                    logger.warning(f"–í–∞–ª—é—Ç–∞ {from_curr} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—É—Ä—Å–∞—Ö –¥–ª—è –∞–ª–µ—Ä—Ç–∞ {alert['id']}")
                    continue
                
                current_rate = rates_today[from_curr]['value']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                condition_met = False
                if direction == 'above':
                    condition_met = current_rate >= threshold
                elif direction == 'below':
                    condition_met = current_rate <= threshold
                
                if condition_met:
                    triggered_alerts.append((alert, current_rate))
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–µ—Ä—Ç–∞ {alert.get('id', 'unknown')}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª—è–µ–º —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –∞–ª–µ—Ä—Ç—ã
        for alert, current_rate in triggered_alerts:
            try:
                user_id = alert['user_id']
                from_curr = alert['from_currency']
                to_curr = alert['to_currency']
                threshold = alert['threshold']
                direction = alert['direction']
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = (
                    f"üîî <b>–°–†–ê–ë–û–¢–ê–õ–û –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!</b>\n\n"
                    f"üí± <b>{from_curr} ‚Üí {to_curr}</b>\n"
                    f"üìà <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> {current_rate:.2f} —Ä—É–±.\n"
                    f"üéØ <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥:</b> {threshold} —Ä—É–±.\n"
                    f"üìä <b>–£—Å–ª–æ–≤–∏–µ:</b> –∫—É—Ä—Å {'–≤—ã—à–µ' if direction == 'above' else '–Ω–∏–∂–µ'} {threshold} —Ä—É–±.\n\n"
                    f"<i>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã</i>"
                )
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='HTML'
                )
                
                # –£–¥–∞–ª—è–µ–º —Å—Ä–∞–±–æ—Ç–∞–≤—à–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await remove_alert(alert['id'])
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è {from_curr}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–ª–µ—Ä—Ç–∞ {alert['id']}: {e}")
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ä–∞–±–æ—Ç–∞–ª–æ: {len(triggered_alerts)}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

async def debug_alerts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        user_id = update.effective_user.id
        logger.info(f"–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è user_id: {user_id}")
        
        # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import asyncpg
        conn = await asyncpg.connect(os.getenv('DATABASE_URL'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        table_exists = await conn.fetchval(
            "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'alerts')"
        )
        logger.info(f"–¢–∞–±–ª–∏—Ü–∞ alerts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {table_exists}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        alerts = await conn.fetch(
            "SELECT * FROM alerts WHERE user_id = $1 ORDER BY id DESC",
            user_id
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        table_structure = await conn.fetch(
            "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'alerts'"
        )
        
        await conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üîß <b>–û–¢–õ–ê–î–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô</b>\n\n"
        message += f"<b>User ID:</b> {user_id}\n"
        message += f"<b>–¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:</b> {table_exists}\n\n"
        
        message += "<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã alerts:</b>\n"
        for col in table_structure:
            message += f"  {col['column_name']} ({col['data_type']})\n"
        
        message += f"\n<b>–ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> {len(alerts)}\n\n"
        
        for i, alert in enumerate(alerts, 1):
            message += f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {i}:</b>\n"
            for key, value in alert.items():
                message += f"  {key}: {value}\n"
            message += "\n"
        
        if not alerts:
            message += "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            message += "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            message += "1. –ö–æ–º–∞–Ω–¥–∞ /alert –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
            message += "2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
            message += "3. –¢–∞–±–ª–∏—Ü–∞ alerts —Å–æ–∑–¥–∞–Ω–∞\n"
        
        await update.message.reply_text(message, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {str(e)}")

async def my_alerts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = update.effective_user.id
        logger.info(f"–ó–∞–ø—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        alerts = await get_user_alerts(user_id)
        
        if not alerts:
            message = "üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.</b>\n\n"
            message += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            message += "<code>/alert USD RUB 80 above</code>\n"
            message += "—á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∫—É—Ä—Å USD –ø—Ä–µ–≤—ã—Å–∏—Ç 80 —Ä—É–±–ª–µ–π"
            
            keyboard = [
                [InlineKeyboardButton("üí± –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data='create_alert')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            else:
                await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            return
        
        message = "üîî <b>–í–ê–®–ò –ê–ö–¢–ò–í–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø</b>\n\n"
        
        for i, alert in enumerate(alerts, 1):
            from_curr = alert['from_currency']
            to_curr = alert['to_currency']
            threshold = alert['threshold']
            direction = alert['direction']
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            rates_today, _, _, _ = get_currency_rates_with_tomorrow()
            current_rate = "N/A"
            if rates_today and from_curr in rates_today:
                current_rate = f"{rates_today[from_curr]['value']:.2f}"
            
            message += (
                f"{i}. <b>{from_curr} ‚Üí {to_curr}</b>\n"
                f"   üéØ –ü–æ—Ä–æ–≥: <b>{threshold} —Ä—É–±.</b>\n"
                f"   üìä –£—Å–ª–æ–≤–∏–µ: –∫—É—Ä—Å <b>{'–≤—ã—à–µ' if direction == 'above' else '–Ω–∏–∂–µ'}</b> {threshold} —Ä—É–±.\n"
                f"   üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: <b>{current_rate} —Ä—É–±.</b>\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if current_rate != "N/A":
                current_value = float(current_rate)
                threshold_value = float(threshold)
                if direction == 'above' and current_value >= threshold_value:
                    message += "   ‚úÖ <b>–£–°–õ–û–í–ò–ï –í–´–ü–û–õ–ù–ï–ù–û!</b>\n"
                elif direction == 'below' and current_value <= threshold_value:
                    message += "   ‚úÖ <b>–£–°–õ–û–í–ò–ï –í–´–ü–û–õ–ù–ï–ù–û!</b>\n"
                else:
                    progress = abs(current_value - threshold_value)
                    message += f"   üìà –û—Å—Ç–∞–ª–æ—Å—å: <b>{progress:.2f} —Ä—É–±.</b>\n"
            
            message += "\n"
        
        message += "‚è∞ <i>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>\n"
        message += "üí° <i>–ü—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç—Å—è</i>"
        
        keyboard = [
            [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data='clear_all_alerts')],
            [InlineKeyboardButton("üí± –°–æ–∑–¥–∞—Ç—å –µ—â—ë", callback_data='create_alert')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /myalerts: {e}")
        error_msg = (
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /debug_alerts –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."
        )
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(error_msg, parse_mode='HTML', reply_markup=reply_markup)
        else:
            await update.message.reply_text(error_msg, parse_mode='HTML', reply_markup=reply_markup)

async def clear_all_alerts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        alerts = await get_user_alerts(user_id)
        
        if not alerts:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await clear_user_alerts(user_id)
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚úÖ <b>–í—Å–µ –≤–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.</b>",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

# =============================================================================
# –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê - –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –î–ê–ù–ù–´–•
# =============================================================================

async def show_currency_rates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞"""
    try:
        rates_today, date_today, rates_tomorrow, changes = get_currency_rates_with_tomorrow()
        
        if not rates_today:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.message.reply_text(error_msg, reply_markup=reply_markup)
            else:
                await update.message.reply_text(error_msg, reply_markup=reply_markup)
            return
        
        message = format_currency_rates_message(rates_today, date_today, rates_tomorrow, changes)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.callback_query:
            await update.callback_query.message.reply_text(error_msg, reply_markup=reply_markup)
        else:
            await update.message.reply_text(error_msg, reply_markup=reply_markup)

async def show_key_rate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¶–ë –†–§"""
    try:
        key_rate_data = get_key_rate()
        
        if not key_rate_data:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¶–ë –†–§."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.message.reply_text(error_msg, reply_markup=reply_markup)
            else:
                await update.message.reply_text(error_msg, reply_markup=reply_markup)
            return
        
        message = format_key_rate_message(key_rate_data)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='currency_rates')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –æ—Ç –¶–ë –†–§."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.callback_query:
            await update.callback_query.message.reply_text(error_msg, reply_markup=reply_markup)
        else:
            await update.message.reply_text(error_msg, reply_markup=reply_markup)

async def show_crypto_rates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = "üîÑ <b>–ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...</b>"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(loading_message, parse_mode='HTML', reply_markup=reply_markup)
        else:
            message = await update.message.reply_text(loading_message, parse_mode='HTML', reply_markup=reply_markup)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        crypto_rates = get_crypto_rates()
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if not crypto_rates:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç CoinGecko, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            crypto_rates = get_crypto_rates_fallback()
        
        if not crypto_rates:
            error_msg = (
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ CoinGecko API\n"
                "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
            if update.callback_query:
                await update.callback_query.edit_message_text(error_msg, parse_mode='HTML', reply_markup=reply_markup)
            else:
                await message.edit_text(error_msg, parse_mode='HTML', reply_markup=reply_markup)
            return
        
        message_text = format_crypto_rates_message(crypto_rates)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        if crypto_rates.get('source') == 'demo_fallback':
            message_text += "\n\n‚ö†Ô∏è <i>–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CoinGecko API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)</i>"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='crypto_rates')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(message_text, parse_mode='HTML', reply_markup=reply_markup)
        else:
            await message.edit_text(message_text, parse_mode='HTML', reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(error_msg, reply_markup=reply_markup)
        else:
            await update.message.reply_text(error_msg, reply_markup=reply_markup)

# =============================================================================
# –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò
# =============================================================================

async def alert_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç—ã"""
    try:
        args = context.args
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /alert —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args}")
        
        if len(args) != 4:
            keyboard = [
                [InlineKeyboardButton("üìã –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='my_alerts')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üìù <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /alert &lt;–∏–∑&gt; &lt;–≤&gt; &lt;–ø–æ—Ä–æ–≥&gt; &lt;above|below&gt;\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ <code>/alert USD RUB 80 above</code> - —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–≥–¥–∞ USD –≤—ã—à–µ 80 —Ä—É–±.\n"
                "‚Ä¢ <code>/alert EUR RUB 90 below</code> - —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–≥–¥–∞ EUR –Ω–∏–∂–µ 90 —Ä—É–±.\n\n"
                "üí± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:</b> USD, EUR, GBP, JPY, CNY, CHF, CAD, AUD, TRY, KZT\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å!",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return
        
        from_curr, to_curr = args[0].upper(), args[1].upper()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
        supported_currencies = ['USD', 'EUR', 'GBP', 'JPY', 'CNY', 'CHF', 'CAD', 'AUD', 'TRY', 'KZT']
        if from_curr not in supported_currencies:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"‚ùå –í–∞–ª—é—Ç–∞ <b>{from_curr}</b> –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n"
                f"üí± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:</b> {', '.join(supported_currencies)}",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞ - RUB
        if to_curr != 'RUB':
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "‚ùå –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä —Å RUB.\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/alert USD RUB 80 above</code>",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return
        
        try:
            threshold = float(args[2])
            if threshold <= 0:
                raise ValueError("–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        except ValueError:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.",
                reply_markup=reply_markup
            )
            return
        
        direction = args[3].lower()
        if direction not in ['above', 'below']:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'above' –∏–ª–∏ 'below'.",
                reply_markup=reply_markup
            )
            return
        
        user_id = update.effective_message.from_user.id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: user_id={user_id}, {from_curr}/{to_curr} {threshold} {direction}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await add_alert(user_id, from_curr, to_curr, threshold, direction)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        rates_today, _, _, _ = get_currency_rates_with_tomorrow()
        current_rate = "N/A"
        if rates_today and from_curr in rates_today:
            current_rate = f"{rates_today[from_curr]['value']:.2f}"
        
        keyboard = [
            [InlineKeyboardButton("üìã –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='my_alerts')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        success_message = (
            f"‚úÖ <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û!</b>\n\n"
            f"üí± <b>–ü–∞—Ä–∞:</b> {from_curr}/{to_curr}\n"
            f"üéØ <b>–ü–æ—Ä–æ–≥:</b> {threshold} —Ä—É–±.\n"
            f"üìä <b>–£—Å–ª–æ–≤–∏–µ:</b> –∫—É—Ä—Å <b>{'–≤—ã—à–µ' if direction == 'above' else '–Ω–∏–∂–µ'}</b> {threshold} —Ä—É–±.\n"
            f"üíπ <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> {current_rate} —Ä—É–±.\n\n"
            f"üí° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n"
            f"üîî –ü—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        
        await update.message.reply_text(
            success_message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /alert: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n<code>{str(e)}</code>",
            parse_mode='HTML',
            reply_markup=reply_markup
        )

# =============================================================================
# –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê
# =============================================================================

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user = update.effective_user
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!" if user.first_name else "–ü—Ä–∏–≤–µ—Ç!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ò–ò
        test_ai = await ask_deepseek("test", context)
        ai_available = not (test_ai.startswith("‚ùå") or test_ai.startswith("‚è∞"))
        
        keyboard = [
            [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='currency_rates')],
            [InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data='crypto_rates')],
            [InlineKeyboardButton("üíé –ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", callback_data='key_rate')],
        ]
        
        if ai_available:
            keyboard.append([InlineKeyboardButton("ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫", callback_data='ai_chat')])
        else:
            keyboard.append([InlineKeyboardButton("‚ùå –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", callback_data='ai_unavailable')])
            
        keyboard.extend([
            [InlineKeyboardButton("üîî –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='my_alerts')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')],
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.effective_message.edit_text(
            f'{greeting} –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!\n\n'
            'üèõ <b>–û–§–ò–¶–ò–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –¶–ë –†–§ + –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´</b>\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:',
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î
        await update_user_info(user.id, user.first_name, user.username)
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!" if user.first_name else "–ü—Ä–∏–≤–µ—Ç!"
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        key_rate_data = get_key_rate()
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ò–ò)
        test_ai = await ask_deepseek("test", context)
        ai_available = not (test_ai.startswith("‚ùå") or test_ai.startswith("‚è∞"))
        
        keyboard = [
            [InlineKeyboardButton("üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data='currency_rates')],
            [InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data='crypto_rates')],
            [InlineKeyboardButton("üíé –ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", callback_data='key_rate')],
        ]
        
        if ai_available:
            keyboard.append([InlineKeyboardButton("ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫", callback_data='ai_chat')])
        else:
            keyboard.append([InlineKeyboardButton("‚ùå –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", callback_data='ai_unavailable')])
            
        keyboard.extend([
            [InlineKeyboardButton("üîî –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='my_alerts')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')],
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        start_message = f'{greeting} –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!\n\n'
        start_message += 'üèõ <b>–û–§–ò–¶–ò–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –¶–ë –†–§ + –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´</b>\n\n'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–µ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if key_rate_data and key_rate_data.get('is_current'):
            rate = key_rate_data['rate']
            start_message += f'üíé <b>–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§:</b> <b>{rate:.2f}%</b>\n\n'
        
        if not ai_available:
            start_message += '‚ö†Ô∏è <i>–ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>\n\n'
            
        start_message += '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:'
        
        await update.message.reply_text(
            start_message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_help(update, context)

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = update.effective_user
        greeting = f", {user.first_name}!" if user.first_name else "!"
        
        help_text = (
            f"–ü—Ä–∏–≤–µ—Ç{greeting} –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!\n\n"
            
            "üèõ <b>–û–§–ò–¶–ò–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –¶–ë –†–§ + –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ + –ò–ò</b>\n\n"
            
            "üí± <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ <code>/start</code> - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ <code>/rates</code> - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
            "‚Ä¢ <code>/crypto</code> - –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
            "‚Ä¢ <code>/keyrate</code> - –∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§\n"
            "‚Ä¢ <code>/ai</code> - –ò–ò —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫\n"
            "‚Ä¢ <code>/myalerts</code> - –º–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ <code>/debug_alerts</code> - –æ—Ç–ª–∞–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ <code>/help</code> - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            
            "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ <code>/alert USD RUB 80 above</code> - —É–≤–µ–¥–æ–º–∏—Ç –∫–æ–≥–¥–∞ USD –≤—ã—à–µ 80 —Ä—É–±.\n"
            "‚Ä¢ <code>/alert EUR RUB 90 below</code> - —É–≤–µ–¥–æ–º–∏—Ç –∫–æ–≥–¥–∞ EUR –Ω–∏–∂–µ 90 —Ä—É–±.\n\n"
            
            "ü§ñ <b>–ò–ò –ü–æ–º–æ—â–Ω–∏–∫:</b>\n"
            "‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º, –∫—É—Ä—Å–∞–º –≤–∞–ª—é—Ç\n"
            "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
            "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º\n\n"
            
            "‚è∞ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è\n\n"
            
            "üåÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00\n\n"
            
            "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:</b>\n"
            "‚Ä¢ <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç</b> - –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∏—Ä–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
            "‚Ä¢ <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</b> - Bitcoin, Ethereum, Binance Coin –∏ –¥—Ä—É–≥–∏–µ\n"
            "‚Ä¢ <b>–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞</b> - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§\n"
            "‚Ä¢ <b>–ò–ò –ü–æ–º–æ—â–Ω–∏–∫</b> - –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n\n"
            
            "üí° <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>\n\n"
            "‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ –¶–ë –†–§ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n"
            "‚Ä¢ –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è CoinGecko API\n"
            "‚Ä¢ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ DeepSeek AI\n"
            "‚Ä¢ –ö—É—Ä—Å—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¶–ë –†–§\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
        )
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(help_text, parse_mode='HTML', reply_markup=reply_markup)
        else:
            await update.message.reply_text(help_text, parse_mode='HTML', reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏: {e}")

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = update.effective_user
        greeting = f", {user.first_name}!" if user.first_name else "!"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è{greeting} –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
            "–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /stop: {e}")

async def rates_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_currency_rates(update, context)

async def currency_rates_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_currency_rates(update, context)

async def keyrate_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_key_rate(update, context)

async def crypto_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_crypto_rates(update, context)

async def ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_ai_chat(update, context)

async def myalerts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await my_alerts_command(update, context)

# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ò –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´
# =============================================================================

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == 'help':
            await show_help(update, context)
        elif data == 'back_to_main':
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –ò–ò –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            context.user_data['ai_mode'] = False
            await show_main_menu(update, context)
        elif data == 'currency_rates':
            await show_currency_rates(update, context)
        elif data == 'crypto_rates':
            await show_crypto_rates(update, context)
        elif data == 'key_rate':
            await show_key_rate(update, context)
        elif data == 'ai_chat':
            await show_ai_chat(update, context)
        elif data == 'ai_unavailable':
            await show_ai_unavailable(update, context)
        elif data == 'ai_examples':
            await show_ai_examples(update, context)
        elif data == 'my_alerts':
            await my_alerts_command(update, context)
        elif data == 'clear_all_alerts':
            await clear_all_alerts_handler(update, context)
        elif data == 'create_alert':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            help_text = (
                "üìù <b>–°–û–ó–î–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "<code>/alert –í–ê–õ–Æ–¢–ê RUB –ü–û–†–û–ì above/below</code>\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ <code>/alert USD RUB 80 above</code> - —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–≥–¥–∞ USD –≤—ã—à–µ 80 —Ä—É–±.\n"
                "‚Ä¢ <code>/alert EUR RUB 90 below</code> - —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–≥–¥–∞ EUR –Ω–∏–∂–µ 90 —Ä—É–±.\n\n"
                "üí± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n"
                "USD, EUR, GBP, JPY, CNY, CHF, CAD, AUD, TRY, KZT\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä –≤—ã—à–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É!"
            )
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º", callback_data='my_alerts')],
                [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(help_text, parse_mode='HTML', reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {e}")

# =============================================================================
# –§–ò–ù–ê–ù–°–û–í–´–ï –í–û–ü–†–û–°–´ –ë–ï–ó –ò–ò (FALLBACK)
# =============================================================================

async def handle_financial_questions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –ò–ò API"""
    try:
        user_message = update.message.text.lower()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        responses = {
            '–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞': await get_simple_currency_response('USD'),
            '–∫—É—Ä—Å –µ–≤—Ä–æ': await get_simple_currency_response('EUR'),
            '–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞': await get_simple_key_rate_response(),
            '–±–∏—Ç–∫–æ–∏–Ω': await get_simple_crypto_response('BTC'),
            '—ç—Ñ–∏—Ä–∏—É–º': await get_simple_crypto_response('ETH'),
            '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã': "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /crypto –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã' –≤ –º–µ–Ω—é",
            '–ø–æ–º–æ—â—å': "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
        }
        
        response = None
        for key, value in responses.items():
            if key in user_message:
                response = value
                break
        
        if response:
            await update.message.reply_text(response, parse_mode='HTML')
        else:
            await update.message.reply_text(
                "ü§ñ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫</b>\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—É–Ω–∫—Ü–∏—è –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ üí± –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
                "‚Ä¢ ‚Çø –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
                "‚Ä¢ üíé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É\n"
                "‚Ä¢ üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!",
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")

async def get_simple_currency_response(currency: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç—ã"""
    try:
        rates_today, date_today, _, _ = get_currency_rates_with_tomorrow()
        if rates_today and currency in rates_today:
            rate = rates_today[currency]['value']
            name = rates_today[currency]['name']
            return f"üí± <b>{name}</b>\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: <b>{rate:.2f} —Ä—É–±.</b>\n\n–î–∞—Ç–∞: {date_today}"
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ {currency}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"

async def get_simple_key_rate_response() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–µ"""
    try:
        key_rate_data = get_key_rate()
        if key_rate_data:
            rate = key_rate_data['rate']
            date = key_rate_data.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            return f"üíé <b>–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§</b>\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{rate:.2f}%</b>\n\n–î–∞—Ç–∞: {date}"
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"

async def get_simple_crypto_response(crypto: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ"""
    try:
        crypto_rates = get_crypto_rates() or get_crypto_rates_fallback()
        if crypto_rates:
            if crypto == 'BTC' and 'bitcoin' in crypto_rates:
                btc = crypto_rates['bitcoin']
                return f"‚Çø <b>Bitcoin (BTC)</b>\n–ö—É—Ä—Å: <b>{btc['price_rub']:,.0f} —Ä—É–±.</b>\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {btc['change_24h']:+.2f}%"
            elif crypto == 'ETH' and 'ethereum' in crypto_rates:
                eth = crypto_rates['ethereum']
                return f"üî∑ <b>Ethereum (ETH)</b>\n–ö—É—Ä—Å: <b>{eth['price_rub']:,.0f} —Ä—É–±.</b>\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {eth['change_24h']:+.2f}%"
        return f"–î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {crypto} –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /crypto"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö {crypto}: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"

# =============================================================================
# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –†–ê–°–°–´–õ–ö–ò –ò –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò
# =============================================================================

async def send_daily_rates(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¶–ë –†–§ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        logger.info("–ù–∞—á–∞–ª–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¶–ë –†–§")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        rates_today, date_today, rates_tomorrow, changes = get_currency_rates_with_tomorrow()
        key_rate_data = get_key_rate()
        
        if not rates_today:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üåÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¶–ë –†–§</b>\n\n"
        
        if key_rate_data and key_rate_data.get('is_current'):
            rate = key_rate_data['rate']
            message += f"üíé <b>–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞:</b> {rate:.2f}%\n\n"
        
        message += format_currency_rates_message(rates_today, date_today, rates_tomorrow, changes)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        users = await get_all_users()
        
        if not users:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success_count = 0
        for user in users:
            try:
                await context.bot.send_message(
                    chat_id=user['user_id'],
                    text=message,
                    parse_mode='HTML'
                )
                success_count += 1
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
        
        logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{len(users)}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")

# =============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö –ë–û–¢–ê
# =============================================================================

async def post_init(application: Application) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    try:
        await init_db()
        logger.info("–ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º application
        application = Application.builder().token(TOKEN).post_init(post_init).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("stop", stop_command))
        application.add_handler(CommandHandler("rates", rates_command))
        application.add_handler(CommandHandler("currency", currency_rates_command))
        application.add_handler(CommandHandler("keyrate", keyrate_command))
        application.add_handler(CommandHandler("crypto", crypto_command))
        application.add_handler(CommandHandler("ai", ai_command))
        application.add_handler(CommandHandler("alert", alert_command))
        application.add_handler(CommandHandler("myalerts", myalerts_command))
        application.add_handler(CommandHandler("debug_alerts", debug_alerts_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –ò–ò)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ai_message))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (fallback)
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            handle_financial_questions
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ 10:00 (07:00 UTC)
        job_queue = application.job_queue
        
        if job_queue:
            # 10:00 –ú–°–ö = 07:00 UTC
            job_queue.run_daily(
                send_daily_rates,
                time=datetime.strptime("07:00", "%H:%M").time(),
                days=(0, 1, 2, 3, 4, 5, 6)
            )
            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ 10:00 –ú–°–ö (07:00 UTC)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            job_queue.run_repeating(
                check_alerts, 
                interval=1800,  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                first=10        # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            )
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
        else:
            logger.warning("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
